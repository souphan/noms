{"remainingRequest":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/progress-spinner.es5.js","dependencies":[{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/progress-spinner.es5.js","mtime":1507246791000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_core,_angular_cdk_platform,_angular_material_core,tslib,tslib,_angular_common PURE_IMPORTS_END */\nimport { ChangeDetectionStrategy, Component, ElementRef, Inject, Input, NgModule, Optional, Renderer2, ViewEncapsulation } from '@angular/core';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { MatCommonModule, mixinColor } from '@angular/material/core';\nimport { __extends } from 'tslib';\nimport { DOCUMENT } from '@angular/common';\n/**\n * \\@docs-private\n */\nvar MatProgressSpinnerBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MatProgressSpinnerBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MatProgressSpinnerBase;\n}());\nvar _MatProgressSpinnerMixinBase = /*@__PURE__*/ mixinColor(MatProgressSpinnerBase, 'primary');\nvar INDETERMINATE_ANIMATION_TEMPLATE = \"\\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\\n\\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\\n\\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\\n\\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\\n  }\\n\";\n/**\n * <mat-progress-spinner> component.\n */\nvar MatProgressSpinner = /*@__PURE__*/ (function (_super) {\n    __extends(MatProgressSpinner, _super);\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} platform\n     * @param {?} _document\n     */\n    function MatProgressSpinner(_renderer, _elementRef, platform, _document) {\n        var _this = _super.call(this, _renderer, _elementRef) || this;\n        _this._renderer = _renderer;\n        _this._elementRef = _elementRef;\n        _this._document = _document;\n        _this._baseSize = 100;\n        _this._baseStrokeWidth = 10;\n        _this._fallbackAnimation = false;\n        /**\n         * The width and height of the host element. Will grow with stroke width. *\n         */\n        _this._elementSize = _this._baseSize;\n        _this._diameter = _this._baseSize;\n        /**\n         * Stroke width of the progress spinner.\n         */\n        _this.strokeWidth = 10;\n        /**\n         * Mode of the progress circle\n         */\n        _this.mode = 'determinate';\n        _this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        var animationClass = _this._fallbackAnimation ?\n            'mat-progress-spinner-indeterminate-fallback-animation' :\n            'mat-progress-spinner-indeterminate-animation';\n        _renderer.addClass(_elementRef.nativeElement, animationClass);\n        return _this;\n    }\n    Object.defineProperty(MatProgressSpinner.prototype, \"diameter\", {\n        /**\n         * The diameter of the progress spinner (will set width and height of svg).\n         * @return {?}\n         */\n        get: function () {\n            return this._diameter;\n        },\n        /**\n         * @param {?} size\n         * @return {?}\n         */\n        set: function (size) {\n            this._setDiameterAndInitStyles(size);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"value\", {\n        /**\n         * Value of the progress circle.\n         * @return {?}\n         */\n        get: function () {\n            return this.mode === 'determinate' ? this._value : 0;\n        },\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        set: function (newValue) {\n            if (newValue != null && this.mode === 'determinate') {\n                this._value = Math.max(0, Math.min(100, newValue));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatProgressSpinner.prototype.ngOnChanges = function (changes) {\n        if (changes.strokeWidth || changes.diameter) {\n            this._elementSize =\n                this._diameter + Math.max(this.strokeWidth - this._baseStrokeWidth, 0);\n        }\n    };\n    Object.defineProperty(MatProgressSpinner.prototype, \"_circleRadius\", {\n        /**\n         * The radius of the spinner, adjusted for stroke width.\n         * @return {?}\n         */\n        get: function () {\n            return (this.diameter - this._baseStrokeWidth) / 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"_viewBox\", {\n        /**\n         * The view box of the spinner's svg element.\n         * @return {?}\n         */\n        get: function () {\n            return \"0 0 \" + this._elementSize + \" \" + this._elementSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"_strokeCircumference\", {\n        /**\n         * The stroke circumference of the svg circle.\n         * @return {?}\n         */\n        get: function () {\n            return 2 * Math.PI * this._circleRadius;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"_strokeDashOffset\", {\n        /**\n         * The dash offset of the svg circle.\n         * @return {?}\n         */\n        get: function () {\n            if (this.mode === 'determinate') {\n                return this._strokeCircumference * (100 - this._value) / 100;\n            }\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the diameter and adds diameter-specific styles if necessary.\n     * @param {?} size\n     * @return {?}\n     */\n    MatProgressSpinner.prototype._setDiameterAndInitStyles = function (size) {\n        this._diameter = size;\n        if (!MatProgressSpinner.diameters.has(this.diameter) && !this._fallbackAnimation) {\n            this._attachStyleNode();\n        }\n    };\n    /**\n     * Dynamically generates a style tag containing the correct animation for this diameter.\n     * @return {?}\n     */\n    MatProgressSpinner.prototype._attachStyleNode = function () {\n        var /** @type {?} */ styleTag = this._renderer.createElement('style');\n        styleTag.textContent = this._getAnimationText();\n        this._renderer.appendChild(this._document.head, styleTag);\n        MatProgressSpinner.diameters.add(this.diameter);\n    };\n    /**\n     * Generates animation styles adjusted for the spinner's diameter.\n     * @return {?}\n     */\n    MatProgressSpinner.prototype._getAnimationText = function () {\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            .replace(/START_VALUE/g, \"\" + 0.95 * this._strokeCircumference)\n            .replace(/END_VALUE/g, \"\" + 0.2 * this._strokeCircumference)\n            .replace(/DIAMETER/g, \"\" + this.diameter);\n    };\n    /**\n     * Tracks diameters of existing instances to de-dupe generated styles (default d = 100)\n     */\n    MatProgressSpinner.diameters = new Set([100]);\n    return MatProgressSpinner;\n}(_MatProgressSpinnerMixinBase));\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\nvar MatSpinner = /*@__PURE__*/ (function (_super) {\n    __extends(MatSpinner, _super);\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} platform\n     * @param {?} document\n     */\n    function MatSpinner(renderer, elementRef, platform, document) {\n        var _this = _super.call(this, renderer, elementRef, platform, document) || this;\n        _this.mode = 'indeterminate';\n        return _this;\n    }\n    return MatSpinner;\n}(MatProgressSpinner));\nvar MatProgressSpinnerModule = /*@__PURE__*/ (function () {\n    function MatProgressSpinnerModule() {\n    }\n    return MatProgressSpinnerModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatProgressSpinnerModule, MatProgressSpinnerBase, _MatProgressSpinnerMixinBase, MatProgressSpinner, MatSpinner };\n//# sourceMappingURL=progress-spinner.es5.js.map\n",null]}