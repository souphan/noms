{"remainingRequest":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/dialog.es5.js","dependencies":[{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/dialog.es5.js","mtime":1507246791000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_core,_angular_common,_angular_cdk_overlay,_angular_cdk_portal,_angular_cdk_a11y,_angular_material_core,_angular_cdk_keycodes,_angular_cdk_rxjs,_angular_cdk_bidi,rxjs_observable_defer,rxjs_Subject,tslib,tslib,_angular_animations,_angular_platform_browser,rxjs_observable_of PURE_IMPORTS_END */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, EventEmitter, Inject, Injectable, InjectionToken, Injector, Input, NgModule, Optional, SkipSelf, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { CommonModule, Location } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalHost, ComponentPortal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal } from '@angular/cdk/portal';\nimport { A11yModule, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { MatCommonModule, extendObject } from '@angular/material/core';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { RxChain, filter, first, startWith } from '@angular/cdk/rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { defer } from 'rxjs/observable/defer';\nimport { Subject } from 'rxjs/Subject';\nimport { __extends } from 'tslib';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { of } from 'rxjs/observable/of';\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nvar MatDialogConfig = /*@__PURE__*/ (function () {\n    function MatDialogConfig() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * Custom class for the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the dialog has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Custom class for the backdrop,\n         */\n        this.backdropClass = '';\n        /**\n         * Whether the user can use escape or clicking outside to close a modal.\n         */\n        this.disableClose = false;\n        /**\n         * Width of the dialog.\n         */\n        this.width = '';\n        /**\n         * Height of the dialog.\n         */\n        this.height = '';\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * Layout direction for the dialog's content.\n         */\n        this.direction = 'ltr';\n        /**\n         * ID of the element that describes the dialog.\n         */\n        this.ariaDescribedBy = null;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n    return MatDialogConfig;\n}());\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nvar MatDialogContainer = /*@__PURE__*/ (function (_super) {\n    __extends(MatDialogContainer, _super);\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     */\n    function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document) {\n        var _this = _super.call(this) || this;\n        _this._elementRef = _elementRef;\n        _this._focusTrapFactory = _focusTrapFactory;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._document = _document;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        _this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * State of the dialog animation.\n         */\n        _this._state = 'enter';\n        /**\n         * Emits when an animation state changes.\n         */\n        _this._animationStateChanged = new EventEmitter();\n        /**\n         * ID of the element that should be considered as the dialog's label.\n         */\n        _this._ariaLabelledBy = null;\n        /**\n         * Whether the container is currently mid-animation.\n         */\n        _this._isAnimating = false;\n        return _this;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    MatDialogContainer.prototype.attachComponentPortal = function (portal) {\n        if (this._portalHost.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalHost.attachComponentPortal(portal);\n    };\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    MatDialogContainer.prototype.attachTemplatePortal = function (portal) {\n        if (this._portalHost.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalHost.attachTemplatePortal(portal);\n    };\n    /**\n     * Moves the focus inside the focus trap.\n     * @return {?}\n     */\n    MatDialogContainer.prototype._trapFocus = function () {\n        var _this = this;\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        this._focusTrap.focusInitialElementWhenReady().then(function (hasMovedFocus) {\n            // If we didn't find any focusable elements inside the dialog, focus the\n            // container so the user can't tab into other elements behind it.\n            if (!hasMovedFocus) {\n                _this._elementRef.nativeElement.focus();\n            }\n        });\n    };\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @return {?}\n     */\n    MatDialogContainer.prototype._restoreFocus = function () {\n        var /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (toFocus && typeof toFocus.focus === 'function') {\n            toFocus.focus();\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    };\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @return {?}\n     */\n    MatDialogContainer.prototype._savePreviouslyFocusedElement = function () {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = (this._document.activeElement);\n        }\n    };\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n    MatDialogContainer.prototype._onAnimationDone = function (event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n        this._isAnimating = false;\n    };\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n    MatDialogContainer.prototype._onAnimationStart = function (event) {\n        this._isAnimating = true;\n        this._animationStateChanged.emit(event);\n    };\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n    MatDialogContainer.prototype._startExitAnimation = function () {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    };\n    return MatDialogContainer;\n}(BasePortalHost));\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nvar uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nvar MatDialogRef = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     * @param {?=} id\n     */\n    function MatDialogRef(_overlayRef, _containerInstance, id) {\n        if (id === void 0) {\n            id = \"mat-dialog-\" + uniqueId++;\n        }\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /**\n         * Whether the user is allowed to close the dialog.\n         */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /**\n         * Subject for notifying the user that the dialog has finished opening.\n         */\n        this._afterOpen = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has started closing.\n         */\n        this._beforeClose = new Subject();\n        // Emit when opening animation completes\n        RxChain.from(_containerInstance._animationStateChanged)\n            .call(filter, function (event) { return event.phaseName === 'done' && event.toState === 'enter'; })\n            .call(first)\n            .subscribe(function () {\n            _this._afterOpen.next();\n            _this._afterOpen.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        RxChain.from(_containerInstance._animationStateChanged)\n            .call(filter, function (event) { return event.phaseName === 'done' && event.toState === 'exit'; })\n            .call(first)\n            .subscribe(function () {\n            _this._overlayRef.dispose();\n            _this._afterClosed.next(_this._result);\n            _this._afterClosed.complete();\n            _this.componentInstance = null;\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    MatDialogRef.prototype.close = function (dialogResult) {\n        var _this = this;\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        RxChain.from(this._containerInstance._animationStateChanged)\n            .call(filter, function (event) { return event.phaseName === 'start'; })\n            .call(first)\n            .subscribe(function () {\n            _this._beforeClose.next(dialogResult);\n            _this._beforeClose.complete();\n            _this._overlayRef.detachBackdrop();\n        });\n        this._containerInstance._startExitAnimation();\n    };\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n    MatDialogRef.prototype.afterOpen = function () {\n        return this._afterOpen.asObservable();\n    };\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    MatDialogRef.prototype.afterClosed = function () {\n        return this._afterClosed.asObservable();\n    };\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n    MatDialogRef.prototype.beforeClose = function () {\n        return this._beforeClose.asObservable();\n    };\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n    MatDialogRef.prototype.backdropClick = function () {\n        return this._overlayRef.backdropClick();\n    };\n    /**\n     * Updates the dialog's position.\n     * @param {?=} position New dialog position.\n     * @return {?}\n     */\n    MatDialogRef.prototype.updatePosition = function (position) {\n        var /** @type {?} */ strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    };\n    /**\n     * Updates the dialog's width and height.\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {?}\n     */\n    MatDialogRef.prototype.updateSize = function (width, height) {\n        if (width === void 0) {\n            width = 'auto';\n        }\n        if (height === void 0) {\n            height = 'auto';\n        }\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    };\n    /**\n     * Returns whether the dialog is animating.\n     * @return {?}\n     */\n    MatDialogRef.prototype._isAnimating = function () {\n        return this._containerInstance._isAnimating;\n    };\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @return {?}\n     */\n    MatDialogRef.prototype._getPositionStrategy = function () {\n        return (this._overlayRef.getConfig().positionStrategy);\n    };\n    return MatDialogRef;\n}());\nvar MAT_DIALOG_DATA = /*@__PURE__*/ new InjectionToken('MatDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nvar MAT_DIALOG_SCROLL_STRATEGY = /*@__PURE__*/ new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.block(); };\n}\n/**\n * \\@docs-private\n */\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nvar MatDialog = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} location\n     * @param {?} _scrollStrategy\n     * @param {?} _parentDialog\n     */\n    function MatDialog(_overlay, _injector, location, _scrollStrategy, _parentDialog) {\n        var _this = this;\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._scrollStrategy = _scrollStrategy;\n        this._parentDialog = _parentDialog;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenAtThisLevel = new Subject();\n        this._boundKeydown = this._handleKeydown.bind(this);\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(function () {\n            return _this.openDialogs.length ?\n                _this._afterAllClosed :\n                startWith.call(_this._afterAllClosed, undefined);\n        });\n        // Close all of the dialogs when the user goes forwards/backwards in history or when the\n        // location hash changes. Note that this usually doesn't include clicking on links (unless\n        // the user is using the `HashLocationStrategy`).\n        if (!_parentDialog && location) {\n            location.subscribe(function () { return _this.closeAll(); });\n        }\n    }\n    Object.defineProperty(MatDialog.prototype, \"openDialogs\", {\n        /**\n         * Keeps track of the currently-open dialogs.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDialog.prototype, \"afterOpen\", {\n        /**\n         * Stream that emits when a dialog has been opened.\n         * @return {?}\n         */\n        get: function () {\n            return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDialog.prototype, \"_afterAllClosed\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ parent = this._parentDialog;\n            return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    MatDialog.prototype.open = function (componentOrTemplateRef, config) {\n        var _this = this;\n        var /** @type {?} */ inProgressDialog = this.openDialogs.find(function (dialog) { return dialog._isAnimating(); });\n        // If there's a dialog that is in the process of being opened, return it instead.\n        if (inProgressDialog) {\n            return inProgressDialog;\n        }\n        config = _applyConfigDefaults(config);\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(\"Dialog with id \\\"\" + config.id + \"\\\" exists already. The dialog id must be unique.\");\n        }\n        var /** @type {?} */ overlayRef = this._createOverlay(config);\n        var /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n        var /** @type {?} */ dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        if (!this.openDialogs.length) {\n            document.addEventListener('keydown', this._boundKeydown);\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(function () { return _this._removeOpenDialog(dialogRef); });\n        this.afterOpen.next(dialogRef);\n        return dialogRef;\n    };\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    MatDialog.prototype.closeAll = function () {\n        var /** @type {?} */ i = this.openDialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            this.openDialogs[i].close();\n        }\n    };\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n    MatDialog.prototype.getDialogById = function (id) {\n        return this.openDialogs.find(function (dialog) { return dialog.id === id; });\n    };\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    MatDialog.prototype._createOverlay = function (config) {\n        var /** @type {?} */ overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    };\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    MatDialog.prototype._getOverlayConfig = function (dialogConfig) {\n        var /** @type {?} */ state$$1 = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction\n        });\n        if (dialogConfig.backdropClass) {\n            state$$1.backdropClass = dialogConfig.backdropClass;\n        }\n        return state$$1;\n    };\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    MatDialog.prototype._attachDialogContainer = function (overlay, config) {\n        var /** @type {?} */ containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n        var /** @type {?} */ containerRef = overlay.attach(containerPortal);\n        containerRef.instance._config = config;\n        return containerRef.instance;\n    };\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @template T\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    MatDialog.prototype._attachDialogContent = function (componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        var /** @type {?} */ dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n        // When the dialog backdrop is clicked, we want to close it.\n        if (config.hasBackdrop) {\n            overlayRef.backdropClick().subscribe(function () {\n                if (!dialogRef.disableClose) {\n                    dialogRef.close();\n                }\n            });\n        }\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */ ((null)), /** @type {?} */ ({ $implicit: config.data, dialogRef: dialogRef })));\n        }\n        else {\n            var /** @type {?} */ injector = this._createInjector(config, dialogRef, dialogContainer);\n            var /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    };\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    MatDialog.prototype._createInjector = function (config, dialogRef, dialogContainer) {\n        var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var /** @type {?} */ injectionTokens = new WeakMap();\n        injectionTokens.set(MatDialogRef, dialogRef);\n        injectionTokens.set(MatDialogContainer, dialogContainer);\n        injectionTokens.set(MAT_DIALOG_DATA, config.data);\n        injectionTokens.set(Directionality, {\n            value: config.direction,\n            change: of()\n        });\n        return new PortalInjector(userInjector || this._injector, injectionTokens);\n    };\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    MatDialog.prototype._removeOpenDialog = function (dialogRef) {\n        var /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // no open dialogs are left, call next on afterAllClosed Subject\n            if (!this.openDialogs.length) {\n                this._afterAllClosed.next();\n                document.removeEventListener('keydown', this._boundKeydown);\n            }\n        }\n    };\n    /**\n     * Handles global key presses while there are open dialogs. Closes the\n     * top dialog when the user presses escape.\n     * @param {?} event\n     * @return {?}\n     */\n    MatDialog.prototype._handleKeydown = function (event) {\n        var /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\n        var /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n        if (event.keyCode === ESCAPE && canClose) {\n            topDialog.close();\n        }\n    };\n    return MatDialog;\n}());\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config) {\n    return extendObject(new MatDialogConfig(), config);\n}\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nvar dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nvar MatDialogClose = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} dialogRef\n     */\n    function MatDialogClose(dialogRef) {\n        this.dialogRef = dialogRef;\n        /**\n         * Screenreader label for the button.\n         */\n        this.ariaLabel = 'Close dialog';\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatDialogClose.prototype.ngOnChanges = function (changes) {\n        var /** @type {?} */ proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    };\n    return MatDialogClose;\n}());\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nvar MatDialogTitle = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _container\n     */\n    function MatDialogTitle(_container) {\n        this._container = _container;\n        this.id = \"mat-dialog-title-\" + dialogElementUid++;\n    }\n    /**\n     * @return {?}\n     */\n    MatDialogTitle.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this._container && !this._container._ariaLabelledBy) {\n            Promise.resolve().then(function () { return _this._container._ariaLabelledBy = _this.id; });\n        }\n    };\n    return MatDialogTitle;\n}());\n/**\n * Scrollable content container of a dialog.\n */\nvar MatDialogContent = /*@__PURE__*/ (function () {\n    function MatDialogContent() {\n    }\n    return MatDialogContent;\n}());\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nvar MatDialogActions = /*@__PURE__*/ (function () {\n    function MatDialogActions() {\n    }\n    return MatDialogActions;\n}());\nvar MatDialogModule = /*@__PURE__*/ (function () {\n    function MatDialogModule() {\n    }\n    return MatDialogModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatDialogModule, MAT_DIALOG_DATA, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef };\n//# sourceMappingURL=dialog.es5.js.map\n",null]}