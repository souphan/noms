{"remainingRequest":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/slide-toggle.es5.js","dependencies":[{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/slide-toggle.es5.js","mtime":1507246791000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_cdk_observers,_angular_cdk_platform,_angular_core,_angular_material_core,_angular_platform_browser,_angular_cdk_a11y,tslib,tslib,_angular_cdk_coercion,_angular_forms PURE_IMPORTS_END */\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, NgModule, Output, Renderer2, ViewChild, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { GestureConfig, MatCommonModule, MatRipple, MatRippleModule, applyCssTransform, mixinColor, mixinDisableRipple, mixinDisabled, mixinTabIndex } from '@angular/material/core';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { A11yModule, FocusMonitor } from '@angular/cdk/a11y';\nimport { __extends } from 'tslib';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n// Increasing integer for generating unique ids for slide-toggle components.\nvar nextUniqueId = 0;\nvar MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MatSlideToggle; }),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nvar MatSlideToggleChange = /*@__PURE__*/ (function () {\n    function MatSlideToggleChange() {\n    }\n    return MatSlideToggleChange;\n}());\n/**\n * \\@docs-private\n */\nvar MatSlideToggleBase = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MatSlideToggleBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MatSlideToggleBase;\n}());\nvar _MatSlideToggleMixinBase = /*@__PURE__*/ mixinTabIndex(/*@__PURE__*/ mixinColor(/*@__PURE__*/ mixinDisableRipple(/*@__PURE__*/ mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nvar MatSlideToggle = /*@__PURE__*/ (function (_super) {\n    __extends(MatSlideToggle, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} renderer\n     * @param {?} _platform\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     */\n    function MatSlideToggle(elementRef, renderer, _platform, _focusMonitor, _changeDetectorRef, tabIndex) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        _this._platform = _platform;\n        _this._focusMonitor = _focusMonitor;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this.onChange = function (_) { };\n        _this.onTouched = function () { };\n        _this._uniqueId = \"mat-slide-toggle-\" + ++nextUniqueId;\n        _this._required = false;\n        _this._checked = false;\n        /**\n         * Name value will be applied to the input element if present\n         */\n        _this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        _this.id = _this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n         */\n        _this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        _this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        _this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        _this.change = new EventEmitter();\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        return _this;\n    }\n    Object.defineProperty(MatSlideToggle.prototype, \"required\", {\n        /**\n         * Whether the slide-toggle is required.\n         * @return {?}\n         */\n        get: function () { return this._required; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlideToggle.prototype, \"checked\", {\n        /**\n         * Whether the slide-toggle element is checked or not\n         * @return {?}\n         */\n        get: function () { return this._checked; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._checked = !!value;\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlideToggle.prototype, \"inputId\", {\n        /**\n         * Returns the unique id for the visual hidden input.\n         * @return {?}\n         */\n        get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatSlideToggle.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement, this._renderer, false)\n            .subscribe(function (focusOrigin) { return _this._onInputFocusChange(focusOrigin); });\n    };\n    /**\n     * @return {?}\n     */\n    MatSlideToggle.prototype.ngOnDestroy = function () {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    };\n    /**\n     * This function will called if the underlying input changed its value through user interaction.\n     * @param {?} event\n     * @return {?}\n     */\n    MatSlideToggle.prototype._onChangeEvent = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        // Sync the value from the underlying input element with the slide-toggle component.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event if the native input emitted one.\n        // It is important to only emit it, if the native input triggered one, because we don't want\n        // to trigger a change event, when the `checked` variable changes programmatically.\n        this._emitChangeEvent();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatSlideToggle.prototype._onInputClick = function (event) {\n        // In some situations the user will release the mouse on the label element. The label element\n        // redirects the click to the underlying input element and will result in a value change.\n        // Prevent the default behavior if dragging, because the value will be set after drag.\n        if (this._slideRenderer.dragging) {\n            event.preventDefault();\n        }\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    MatSlideToggle.prototype.writeValue = function (value) {\n        this.checked = !!value;\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    MatSlideToggle.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    MatSlideToggle.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MatSlideToggle.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Focuses the slide-toggle.\n     * @return {?}\n     */\n    MatSlideToggle.prototype.focus = function () {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    };\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    MatSlideToggle.prototype.toggle = function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n    MatSlideToggle.prototype._onInputFocusChange = function (focusOrigin) {\n        if (!this._focusRipple && focusOrigin === 'keyboard') {\n            // For keyboard focus show a persistent ripple as focus indicator.\n            this._focusRipple = this._ripple.launch(0, 0, { persistent: true, centered: true });\n        }\n        else if (!focusOrigin) {\n            this.onTouched();\n            // Fade out and clear the focus ripple if one is currently present.\n            if (this._focusRipple) {\n                this._focusRipple.fadeOut();\n                this._focusRipple = null;\n            }\n        }\n    };\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @return {?}\n     */\n    MatSlideToggle.prototype._emitChangeEvent = function () {\n        var /** @type {?} */ event = new MatSlideToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n        this.onChange(this.checked);\n        this.change.emit(event);\n    };\n    /**\n     * @return {?}\n     */\n    MatSlideToggle.prototype._onDragStart = function () {\n        if (!this.disabled) {\n            this._slideRenderer.startThumbDrag(this.checked);\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatSlideToggle.prototype._onDrag = function (event) {\n        if (this._slideRenderer.dragging) {\n            this._slideRenderer.updateThumbPosition(event.deltaX);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatSlideToggle.prototype._onDragEnd = function () {\n        var _this = this;\n        if (this._slideRenderer.dragging) {\n            var /** @type {?} */ _previousChecked = this.checked;\n            this.checked = this._slideRenderer.dragPercentage > 50;\n            if (_previousChecked !== this.checked) {\n                this._emitChangeEvent();\n            }\n            // The drag should be stopped outside of the current event handler, because otherwise the\n            // click event will be fired before and will revert the drag change.\n            setTimeout(function () { return _this._slideRenderer.stopThumbDrag(); });\n        }\n    };\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    MatSlideToggle.prototype._onLabelTextChange = function () {\n        // This method is getting called whenever the label of the slide-toggle changes.\n        // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    };\n    return MatSlideToggle;\n}(_MatSlideToggleMixinBase));\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nvar SlideToggleRenderer = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} platform\n     */\n    function SlideToggleRenderer(elementRef, platform) {\n        /**\n         * Whether the thumb is currently being dragged.\n         */\n        this.dragging = false;\n        // We only need to interact with these elements when we're on the browser, so only grab\n        // the reference in that case.\n        if (platform.isBrowser) {\n            this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n            this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n        }\n    }\n    /**\n     * Initializes the drag of the slide-toggle.\n     * @param {?} checked\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.startThumbDrag = function (checked) {\n        if (this.dragging) {\n            return;\n        }\n        this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n        this._thumbEl.classList.add('mat-dragging');\n        this._previousChecked = checked;\n        this.dragging = true;\n    };\n    /**\n     * Resets the current drag and returns the new checked value.\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.stopThumbDrag = function () {\n        if (!this.dragging) {\n            return false;\n        }\n        this.dragging = false;\n        this._thumbEl.classList.remove('mat-dragging');\n        // Reset the transform because the component will take care of the thumb position after drag.\n        applyCssTransform(this._thumbEl, '');\n        return this.dragPercentage > 50;\n    };\n    /**\n     * Updates the thumb containers position from the specified distance.\n     * @param {?} distance\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype.updateThumbPosition = function (distance) {\n        this.dragPercentage = this._getDragPercentage(distance);\n        // Calculate the moved distance based on the thumb bar width.\n        var /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n        applyCssTransform(this._thumbEl, \"translate3d(\" + dragX + \"px, 0, 0)\");\n    };\n    /**\n     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n     * @param {?} distance\n     * @return {?}\n     */\n    SlideToggleRenderer.prototype._getDragPercentage = function (distance) {\n        var /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n        // When the toggle was initially checked, then we have to start the drag at the end.\n        if (this._previousChecked) {\n            percentage += 100;\n        }\n        return Math.max(0, Math.min(percentage, 100));\n    };\n    return SlideToggleRenderer;\n}());\nvar MatSlideToggleModule = /*@__PURE__*/ (function () {\n    function MatSlideToggleModule() {\n    }\n    return MatSlideToggleModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggleBase, _MatSlideToggleMixinBase, MatSlideToggle };\n//# sourceMappingURL=slide-toggle.es5.js.map\n",null]}