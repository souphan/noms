{"remainingRequest":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/sidenav.es5.js","dependencies":[{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/sidenav.es5.js","mtime":1507246791000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_cdk_a11y,_angular_cdk_overlay,_angular_common,_angular_core,_angular_material_core,_angular_cdk_scrolling,_angular_animations,_angular_cdk_bidi,_angular_cdk_coercion,_angular_cdk_keycodes,_angular_platform_browser,rxjs_observable_merge,rxjs_Subject,_angular_cdk_rxjs,tslib,tslib PURE_IMPORTS_END */\nimport { A11yModule, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, Inject, Input, NgModule, NgZone, Optional, Output, Renderer2, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatchModule } from '@angular/cdk/scrolling';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { merge } from 'rxjs/observable/merge';\nimport { Subject } from 'rxjs/Subject';\nimport { RxChain, filter, first, startWith, takeUntil } from '@angular/cdk/rxjs';\nimport { __extends } from 'tslib';\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @param {?} position\n * @return {?}\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(\"A drawer was already declared for 'position=\\\"\" + position + \"\\\"'\");\n}\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nvar MatDrawerToggleResult = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} type\n     * @param {?} animationFinished\n     */\n    function MatDrawerToggleResult(type, animationFinished) {\n        this.type = type;\n        this.animationFinished = animationFinished;\n    }\n    return MatDrawerToggleResult;\n}());\nvar MatDrawerContent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _container\n     */\n    function MatDrawerContent(_changeDetectorRef, _container) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._margins = { left: 0, right: 0 };\n    }\n    /**\n     * @return {?}\n     */\n    MatDrawerContent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._container._contentMargins.subscribe(function (margins) {\n            _this._margins = margins;\n            _this._changeDetectorRef.markForCheck();\n        });\n    };\n    return MatDrawerContent;\n}());\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nvar MatDrawer = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _doc\n     */\n    function MatDrawer(_elementRef, _focusTrapFactory, _doc) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._doc = _doc;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /**\n         * Whether the drawer is initialized. Used for disabling the initial animation.\n         */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        /**\n         * Whether the drawer is opened.\n         */\n        this._opened = false;\n        /**\n         * Emits whenever the drawer has started animating.\n         */\n        this._animationStarted = new EventEmitter();\n        /**\n         * Whether the drawer is animating. Used to prevent overlapping animations.\n         */\n        this._isAnimating = false;\n        /**\n         * Current state of the sidenav animation.\n         */\n        this._animationState = 'void';\n        /**\n         * Event emitted when the drawer is fully opened.\n         */\n        this.onOpen = new EventEmitter();\n        /**\n         * Event emitted when the drawer is fully closed.\n         */\n        this.onClose = new EventEmitter();\n        /**\n         * Event emitted when the drawer's position changes.\n         */\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * @deprecated\n         */\n        this.onAlignChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this.onOpen.subscribe(function () {\n            if (_this._doc) {\n                _this._elementFocusedBeforeDrawerWasOpened = _this._doc.activeElement;\n            }\n            if (_this._isFocusTrapEnabled && _this._focusTrap) {\n                _this._focusTrap.focusInitialElementWhenReady();\n            }\n        });\n        this.onClose.subscribe(function () { return _this._restoreFocus(); });\n    }\n    Object.defineProperty(MatDrawer.prototype, \"position\", {\n        /**\n         * The side that the drawer is attached to.\n         * @return {?}\n         */\n        get: function () { return this._position; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            // Make sure we have a valid value.\n            value = value === 'end' ? 'end' : 'start';\n            if (value != this._position) {\n                this._position = value;\n                this.onAlignChanged.emit();\n                this.onPositionChanged.emit();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"align\", {\n        /**\n         * @deprecated\n         * @return {?}\n         */\n        get: function () { return this.position; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this.position = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"mode\", {\n        /**\n         * Mode of the drawer; one of 'over', 'push' or 'side'.\n         * @return {?}\n         */\n        get: function () { return this._mode; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._mode = value;\n            this._modeChanged.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"disableClose\", {\n        /**\n         * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n         * @return {?}\n         */\n        get: function () { return this._disableClose; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disableClose = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"_isFocusTrapEnabled\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            // The focus trap is only enabled when the drawer is open in any mode other than side.\n            return this.opened && this.mode !== 'side';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     * @return {?}\n     */\n    MatDrawer.prototype._restoreFocus = function () {\n        var /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n        if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n            if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n                this._elementFocusedBeforeDrawerWasOpened.focus();\n            }\n            else {\n                this._elementRef.nativeElement.blur();\n            }\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawer.prototype.ngAfterContentInit = function () {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._focusTrap.enabled = this._isFocusTrapEnabled;\n        this._enableAnimations = true;\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawer.prototype.ngOnDestroy = function () {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    };\n    Object.defineProperty(MatDrawer.prototype, \"opened\", {\n        /**\n         * Whether the drawer is opened. We overload this because we trigger an event when it\n         * starts or end.\n         * @return {?}\n         */\n        get: function () { return this._opened; },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            this.toggle(coerceBooleanProperty(v));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Open the drawer.\n     * @return {?}\n     */\n    MatDrawer.prototype.open = function () {\n        return this.toggle(true);\n    };\n    /**\n     * Close the drawer.\n     * @return {?}\n     */\n    MatDrawer.prototype.close = function () {\n        return this.toggle(false);\n    };\n    /**\n     * Toggle this drawer.\n     * @param {?=} isOpen Whether the drawer should be open.\n     * @return {?}\n     */\n    MatDrawer.prototype.toggle = function (isOpen) {\n        var _this = this;\n        if (isOpen === void 0) {\n            isOpen = !this.opened;\n        }\n        if (!this._isAnimating) {\n            this._opened = isOpen;\n            if (isOpen) {\n                this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n            }\n            else {\n                this._animationState = 'void';\n            }\n            this._currentTogglePromise = new Promise(function (resolve) {\n                first.call(isOpen ? _this.onOpen : _this.onClose).subscribe(resolve);\n            });\n            if (this._focusTrap) {\n                this._focusTrap.enabled = this._isFocusTrapEnabled;\n            }\n        }\n        // TODO(crisbeto): This promise is here for backwards-compatibility.\n        // It should be removed next time we do breaking changes in the drawer.\n        return ((this._currentTogglePromise));\n    };\n    /**\n     * Handles the keyboard events.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    MatDrawer.prototype.handleKeydown = function (event) {\n        if (event.keyCode === ESCAPE && !this.disableClose) {\n            this.close();\n            event.stopPropagation();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDrawer.prototype._onAnimationStart = function (event) {\n        this._isAnimating = true;\n        this._animationStarted.emit(event);\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDrawer.prototype._onAnimationEnd = function (event) {\n        var _this = this;\n        var fromState = event.fromState, toState = event.toState;\n        if (toState.indexOf('open') === 0 && fromState === 'void') {\n            this.onOpen.emit(new MatDrawerToggleResult('open', true));\n        }\n        else if (toState === 'void' && fromState.indexOf('open') === 0) {\n            this.onClose.emit(new MatDrawerToggleResult('close', true));\n        }\n        // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n        // the end if animations are disabled. Make this call async to ensure that it still fires\n        // at the appropriate time.\n        Promise.resolve().then(function () {\n            _this._isAnimating = false;\n            _this._currentTogglePromise = null;\n        });\n    };\n    Object.defineProperty(MatDrawer.prototype, \"_width\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MatDrawer;\n}());\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nvar MatDrawerContainer = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _ngZone\n     * @param {?} _changeDetectorRef\n     */\n    function MatDrawerContainer(_dir, _element, _renderer, _ngZone, _changeDetectorRef) {\n        var _this = this;\n        this._dir = _dir;\n        this._element = _element;\n        this._renderer = _renderer;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Event emitted when the drawer backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        this._contentMargins = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n        // properties to point to the proper start/end.\n        if (_dir != null) {\n            takeUntil.call(_dir.change, this._destroyed).subscribe(function () { return _this._validateDrawers(); });\n        }\n    }\n    Object.defineProperty(MatDrawerContainer.prototype, \"start\", {\n        /**\n         * The drawer child with the `start` position.\n         * @return {?}\n         */\n        get: function () { return this._start; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawerContainer.prototype, \"end\", {\n        /**\n         * The drawer child with the `end` position.\n         * @return {?}\n         */\n        get: function () { return this._end; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        startWith.call(this._drawers.changes, null).subscribe(function () {\n            _this._validateDrawers();\n            _this._drawers.forEach(function (drawer) {\n                _this._watchDrawerToggle(drawer);\n                _this._watchDrawerPosition(drawer);\n                _this._watchDrawerMode(drawer);\n            });\n            if (!_this._drawers.length ||\n                _this._isDrawerOpen(_this._start) ||\n                _this._isDrawerOpen(_this._end)) {\n                _this._updateContentMargins();\n            }\n            _this._changeDetectorRef.markForCheck();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.ngOnDestroy = function () {\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /**\n     * Calls `open` of both start and end drawers\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.open = function () {\n        this._drawers.forEach(function (drawer) { return drawer.open(); });\n    };\n    /**\n     * Calls `close` of both start and end drawers\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.close = function () {\n        this._drawers.forEach(function (drawer) { return drawer.close(); });\n    };\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._watchDrawerToggle = function (drawer) {\n        var _this = this;\n        RxChain.from(drawer._animationStarted)\n            .call(takeUntil, this._drawers.changes)\n            .call(filter, function (event) { return event.fromState !== event.toState; })\n            .subscribe(function (event) {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant') {\n                _this._renderer.addClass(_this._element.nativeElement, 'mat-drawer-transition');\n            }\n            _this._updateContentMargins();\n            _this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            takeUntil.call(merge(drawer.onOpen, drawer.onClose), this._drawers.changes).subscribe(function () {\n                return _this._setContainerClass(drawer.opened);\n            });\n        }\n    };\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._watchDrawerPosition = function (drawer) {\n        var _this = this;\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        takeUntil.call(drawer.onPositionChanged, this._drawers.changes).subscribe(function () {\n            first.call(_this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(function () {\n                _this._validateDrawers();\n            });\n        });\n    };\n    /**\n     * Subscribes to changes in drawer mode so we can run change detection.\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._watchDrawerMode = function (drawer) {\n        var _this = this;\n        if (drawer) {\n            takeUntil.call(drawer._modeChanged, merge(this._drawers.changes, this._destroyed))\n                .subscribe(function () {\n                _this._updateContentMargins();\n                _this._changeDetectorRef.markForCheck();\n            });\n        }\n    };\n    /**\n     * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._setContainerClass = function (isAdd) {\n        if (isAdd) {\n            this._renderer.addClass(this._element.nativeElement, 'mat-drawer-opened');\n        }\n        else {\n            this._renderer.removeClass(this._element.nativeElement, 'mat-drawer-opened');\n        }\n    };\n    /**\n     * Validate the state of the drawer children components.\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._validateDrawers = function () {\n        var _this = this;\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(function (drawer) {\n            if (drawer.position == 'end') {\n                if (_this._end != null) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                _this._end = drawer;\n            }\n            else {\n                if (_this._start != null) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                _this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir == null || this._dir.value == 'ltr') {\n            this._left = this._start;\n            this._right = this._end;\n        }\n        else {\n            this._left = this._end;\n            this._right = this._start;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._onBackdropClicked = function () {\n        this.backdropClick.emit();\n        this._closeModalDrawer();\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._closeModalDrawer = function () {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(function (drawer) { return drawer && !drawer.disableClose && drawer.mode !== 'side'; })\n            .forEach(function (drawer) { /** @type {?} */ return ((drawer)).close(); });\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._isShowingBackdrop = function () {\n        return (this._isDrawerOpen(this._start) && ((this._start)).mode != 'side')\n            || (this._isDrawerOpen(this._end) && ((this._end)).mode != 'side');\n    };\n    /**\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._isDrawerOpen = function (drawer) {\n        return drawer != null && drawer.opened;\n    };\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._updateContentMargins = function () {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        var /** @type {?} */ left = 0;\n        var /** @type {?} */ right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._width;\n            }\n            else if (this._left.mode == 'push') {\n                var /** @type {?} */ width = this._left._width;\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._width;\n            }\n            else if (this._right.mode == 'push') {\n                var /** @type {?} */ width = this._right._width;\n                right += width;\n                left -= width;\n            }\n        }\n        this._contentMargins.next({ left: left, right: right });\n    };\n    return MatDrawerContainer;\n}());\nvar MatSidenavContent = /*@__PURE__*/ (function (_super) {\n    __extends(MatSidenavContent, _super);\n    /**\n     * @param {?} changeDetectorRef\n     * @param {?} container\n     */\n    function MatSidenavContent(changeDetectorRef, container) {\n        return _super.call(this, changeDetectorRef, container) || this;\n    }\n    return MatSidenavContent;\n}(MatDrawerContent));\nvar MatSidenav = /*@__PURE__*/ (function (_super) {\n    __extends(MatSidenav, _super);\n    function MatSidenav() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._fixedInViewport = false;\n        _this._fixedTopGap = 0;\n        _this._fixedBottomGap = 0;\n        return _this;\n    }\n    Object.defineProperty(MatSidenav.prototype, \"fixedInViewport\", {\n        /**\n         * Whether the sidenav is fixed in the viewport.\n         * @return {?}\n         */\n        get: function () { return this._fixedInViewport; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._fixedInViewport = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSidenav.prototype, \"fixedTopGap\", {\n        /**\n         * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n         * mode.\n         * @return {?}\n         */\n        get: function () { return this._fixedTopGap; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._fixedTopGap = coerceNumberProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSidenav.prototype, \"fixedBottomGap\", {\n        /**\n         * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n         * fixed mode.\n         * @return {?}\n         */\n        get: function () { return this._fixedBottomGap; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._fixedBottomGap = coerceNumberProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    return MatSidenav;\n}(MatDrawer));\nvar MatSidenavContainer = /*@__PURE__*/ (function (_super) {\n    __extends(MatSidenavContainer, _super);\n    function MatSidenavContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatSidenavContainer;\n}(MatDrawerContainer));\nvar MatSidenavModule = /*@__PURE__*/ (function () {\n    function MatSidenavModule() {\n    }\n    return MatSidenavModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatSidenavModule, throwMatDuplicatedDrawerError, MatDrawerToggleResult, MatDrawerContent, MatDrawer, MatDrawerContainer, MatSidenavContent, MatSidenav, MatSidenavContainer };\n//# sourceMappingURL=sidenav.es5.js.map\n",null]}