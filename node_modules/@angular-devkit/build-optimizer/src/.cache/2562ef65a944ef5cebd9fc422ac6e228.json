{"remainingRequest":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/expansion.es5.js","dependencies":[{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/expansion.es5.js","mtime":1507246791000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_common,_angular_core,_angular_cdk_collections,_angular_cdk_a11y,tslib,tslib,_angular_cdk_coercion,_angular_animations,_angular_material_core,rxjs_Subject,_angular_cdk_keycodes,_angular_cdk_rxjs,rxjs_observable_merge,rxjs_Subscription PURE_IMPORTS_END */\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, EventEmitter, Host, Injectable, Input, NgModule, Optional, Output, Renderer2, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { UNIQUE_SELECTION_DISPATCHER_PROVIDER, UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { A11yModule, FocusMonitor } from '@angular/cdk/a11y';\nimport { __extends } from 'tslib';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { mixinDisabled } from '@angular/material/core';\nimport { Subject } from 'rxjs/Subject';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { filter } from '@angular/cdk/rxjs';\nimport { merge } from 'rxjs/observable/merge';\nimport { Subscription } from 'rxjs/Subscription';\n/**\n * Unique ID counter\n */\nvar nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nvar CdkAccordion = /*@__PURE__*/ (function () {\n    function CdkAccordion() {\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = \"cdk-accordion-\" + nextId++;\n        this._multi = false;\n        this._hideToggle = false;\n        /**\n         * The display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the reset of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n    }\n    Object.defineProperty(CdkAccordion.prototype, \"multi\", {\n        /**\n         * Whether the accordion should allow multiple expanded accordion items simulateously.\n         * @return {?}\n         */\n        get: function () { return this._multi; },\n        /**\n         * @param {?} multi\n         * @return {?}\n         */\n        set: function (multi) { this._multi = coerceBooleanProperty(multi); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkAccordion.prototype, \"hideToggle\", {\n        /**\n         * Whether the expansion indicator should be hidden.\n         * @return {?}\n         */\n        get: function () { return this._hideToggle; },\n        /**\n         * @param {?} show\n         * @return {?}\n         */\n        set: function (show) { this._hideToggle = coerceBooleanProperty(show); },\n        enumerable: true,\n        configurable: true\n    });\n    return CdkAccordion;\n}());\n/**\n * Directive for a Material Design Accordion.\n */\nvar MatAccordion = /*@__PURE__*/ (function (_super) {\n    __extends(MatAccordion, _super);\n    function MatAccordion() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatAccordion;\n}(CdkAccordion));\n/**\n * Used to generate unique ID for each expansion panel.\n */\nvar nextId$1 = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nvar AccordionItem = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _expansionDispatcher\n     */\n    function AccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {\n        var _this = this;\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Event emitted every time the AccordionItem is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the AccordionItem is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the AccordionItem is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * The unique AccordionItem id.\n         */\n        this.id = \"cdk-accordion-child-\" + nextId$1++;\n        /**\n         * Unregister function for _expansionDispatcher *\n         */\n        this._removeUniqueSelectionListener = function () { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen(function (id, accordionId) {\n                if (_this.accordion && !_this.accordion.multi &&\n                    _this.accordion.id === accordionId && _this.id !== id) {\n                    _this.expanded = false;\n                }\n            });\n    }\n    Object.defineProperty(AccordionItem.prototype, \"expanded\", {\n        /**\n         * Whether the AccordionItem is expanded.\n         * @return {?}\n         */\n        get: function () { return this._expanded; },\n        /**\n         * @param {?} expanded\n         * @return {?}\n         */\n        set: function (expanded) {\n            // Only emit events and update the internal value if the value changes.\n            if (this._expanded !== expanded) {\n                this._expanded = expanded;\n                if (expanded) {\n                    this.opened.emit();\n                    /**\n                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                     * the name value is the id of the accordion.\n                     */\n                    var accordionId = this.accordion ? this.accordion.id : this.id;\n                    this._expansionDispatcher.notify(this.id, accordionId);\n                }\n                else {\n                    this.closed.emit();\n                }\n                // Ensures that the animation will run when the value is set outside of an `@Input`.\n                // This includes cases like the open, close and toggle methods.\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    AccordionItem.prototype.ngOnDestroy = function () {\n        this.destroyed.emit();\n        this._removeUniqueSelectionListener();\n    };\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    AccordionItem.prototype.toggle = function () {\n        this.expanded = !this.expanded;\n    };\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    AccordionItem.prototype.close = function () {\n        this.expanded = false;\n    };\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    AccordionItem.prototype.open = function () {\n        this.expanded = true;\n    };\n    return AccordionItem;\n}());\n/**\n * \\@docs-private\n */\nvar MatExpansionPanelBase = /*@__PURE__*/ (function (_super) {\n    __extends(MatExpansionPanelBase, _super);\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _uniqueSelectionDispatcher\n     */\n    function MatExpansionPanelBase(accordion, _changeDetectorRef, _uniqueSelectionDispatcher) {\n        return _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;\n    }\n    return MatExpansionPanelBase;\n}(AccordionItem));\nvar _MatExpansionPanelMixinBase = /*@__PURE__*/ mixinDisabled(MatExpansionPanelBase);\n/**\n * Time and timing curve for expansion panel animations.\n */\nvar EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\nvar MatExpansionPanel = /*@__PURE__*/ (function (_super) {\n    __extends(MatExpansionPanel, _super);\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _uniqueSelectionDispatcher\n     */\n    function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher) {\n        var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;\n        /**\n         * Whether the toggle indicator should be hidden.\n         */\n        _this.hideToggle = false;\n        /**\n         * Stream that emits for changes in `\\@Input` properties.\n         */\n        _this._inputChanges = new Subject();\n        _this.accordion = accordion;\n        return _this;\n    }\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._getHideToggle = function () {\n        if (this.accordion) {\n            return this.accordion.hideToggle;\n        }\n        return this.hideToggle;\n    };\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._hasSpacing = function () {\n        if (this.accordion) {\n            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n        }\n        return false;\n    };\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._getExpandedState = function () {\n        return this.expanded ? 'expanded' : 'collapsed';\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngOnChanges = function (changes) {\n        this._inputChanges.next(changes);\n    };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngOnDestroy = function () {\n        this._inputChanges.complete();\n    };\n    return MatExpansionPanel;\n}(_MatExpansionPanelMixinBase));\nvar MatExpansionPanelActionRow = /*@__PURE__*/ (function () {\n    function MatExpansionPanelActionRow() {\n    }\n    return MatExpansionPanelActionRow;\n}());\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\nvar MatExpansionPanelHeader = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} renderer\n     * @param {?} panel\n     * @param {?} _element\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     */\n    function MatExpansionPanelHeader(renderer, panel, _element, _focusMonitor, _changeDetectorRef) {\n        var _this = this;\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to  subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, filter.call(panel._inputChanges, function (changes) { return !!(changes.hideToggle || changes.disabled); }))\n            .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n        _focusMonitor.monitor(_element.nativeElement, renderer, false);\n    }\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._toggle = function () {\n        if (!this.panel.disabled) {\n            this.panel.toggle();\n        }\n    };\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._isExpanded = function () {\n        return this.panel.expanded;\n    };\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._getExpandedState = function () {\n        return this.panel._getExpandedState();\n    };\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._getPanelId = function () {\n        return this.panel.id;\n    };\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._showToggle = function () {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    };\n    /**\n     * Handle keyup event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._keyup = function (event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this._toggle();\n                break;\n            default:\n                return;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype.ngOnDestroy = function () {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element.nativeElement);\n    };\n    return MatExpansionPanelHeader;\n}());\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nvar MatExpansionPanelDescription = /*@__PURE__*/ (function () {\n    function MatExpansionPanelDescription() {\n    }\n    return MatExpansionPanelDescription;\n}());\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nvar MatExpansionPanelTitle = /*@__PURE__*/ (function () {\n    function MatExpansionPanelTitle() {\n    }\n    return MatExpansionPanelTitle;\n}());\nvar MatExpansionModule = /*@__PURE__*/ (function () {\n    function MatExpansionModule() {\n    }\n    return MatExpansionModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { CdkAccordion, MatAccordion, AccordionItem, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionModule, EXPANSION_PANEL_ANIMATION_TIMING as ɵc15, MatExpansionPanelBase as ɵa15, _MatExpansionPanelMixinBase as ɵb15 };\n//# sourceMappingURL=expansion.es5.js.map\n",null]}