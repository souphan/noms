{"remainingRequest":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/cdk/esm5/rxjs.es5.js","dependencies":[{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/cdk/esm5/rxjs.es5.js","mtime":1507246701000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START rxjs_operator_finally,rxjs_operator_catch,rxjs_operator_do,rxjs_operator_map,rxjs_operator_filter,rxjs_operator_share,rxjs_operator_first,rxjs_operator_switchMap,rxjs_operator_startWith,rxjs_operator_debounceTime,rxjs_operator_auditTime,rxjs_operator_takeUntil,rxjs_operator_delay PURE_IMPORTS_END */\nimport { _finally } from 'rxjs/operator/finally';\nimport { _catch } from 'rxjs/operator/catch';\nimport { _do } from 'rxjs/operator/do';\nimport { map } from 'rxjs/operator/map';\nimport { filter } from 'rxjs/operator/filter';\nimport { share } from 'rxjs/operator/share';\nimport { first } from 'rxjs/operator/first';\nimport { switchMap } from 'rxjs/operator/switchMap';\nimport { startWith } from 'rxjs/operator/startWith';\nimport { debounceTime } from 'rxjs/operator/debounceTime';\nimport { auditTime } from 'rxjs/operator/auditTime';\nimport { takeUntil } from 'rxjs/operator/takeUntil';\nimport { delay } from 'rxjs/operator/delay';\n/**\n * Utility class used to chain RxJS operators.\n *\n * This class is the concrete implementation, but the type used by the user when chaining\n * is StrictRxChain. The strict chain enforces types on the operators to the same level as\n * the prototype-added equivalents.\n */\nvar RxChain = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _context\n     */\n    function RxChain(_context) {\n        this._context = _context;\n    }\n    /**\n     * Starts a new chain and specifies the initial `this` value.\n     * @template O\n     * @param {?} context Initial `this` value for the chain.\n     * @return {?}\n     */\n    RxChain.from = function (context) {\n        return new RxChain(context);\n    };\n    /**\n     * Invokes an RxJS operator as a part of the chain.\n     * @param {?} operator Operator to be invoked.\n     * @param {...?} args Arguments to be passed to the operator.\n     * @return {?}\n     */\n    RxChain.prototype.call = function (operator) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this._context = operator.call.apply(operator, [this._context].concat(args));\n        return this;\n    };\n    /**\n     * Subscribes to the result of the chain.\n     * @param {?} fn Callback to be invoked when the result emits a value.\n     * @return {?}\n     */\n    RxChain.prototype.subscribe = function (fn) {\n        return this._context.subscribe(fn);\n    };\n    /**\n     * Returns the result of the chain.\n     * @return {?}\n     */\n    RxChain.prototype.result = function () {\n        return this._context;\n    };\n    return RxChain;\n}());\nvar FinallyBrand = /*@__PURE__*/ (function () {\n    function FinallyBrand() {\n    }\n    return FinallyBrand;\n}());\nvar CatchBrand = /*@__PURE__*/ (function () {\n    function CatchBrand() {\n    }\n    return CatchBrand;\n}());\nvar DoBrand = /*@__PURE__*/ (function () {\n    function DoBrand() {\n    }\n    return DoBrand;\n}());\nvar MapBrand = /*@__PURE__*/ (function () {\n    function MapBrand() {\n    }\n    return MapBrand;\n}());\nvar FilterBrand = /*@__PURE__*/ (function () {\n    function FilterBrand() {\n    }\n    return FilterBrand;\n}());\nvar ShareBrand = /*@__PURE__*/ (function () {\n    function ShareBrand() {\n    }\n    return ShareBrand;\n}());\nvar FirstBrand = /*@__PURE__*/ (function () {\n    function FirstBrand() {\n    }\n    return FirstBrand;\n}());\nvar SwitchMapBrand = /*@__PURE__*/ (function () {\n    function SwitchMapBrand() {\n    }\n    return SwitchMapBrand;\n}());\nvar StartWithBrand = /*@__PURE__*/ (function () {\n    function StartWithBrand() {\n    }\n    return StartWithBrand;\n}());\nvar DebounceTimeBrand = /*@__PURE__*/ (function () {\n    function DebounceTimeBrand() {\n    }\n    return DebounceTimeBrand;\n}());\nvar AuditTimeBrand = /*@__PURE__*/ (function () {\n    function AuditTimeBrand() {\n    }\n    return AuditTimeBrand;\n}());\nvar TakeUntilBrand = /*@__PURE__*/ (function () {\n    function TakeUntilBrand() {\n    }\n    return TakeUntilBrand;\n}());\nvar DelayBrand = /*@__PURE__*/ (function () {\n    function DelayBrand() {\n    }\n    return DelayBrand;\n}());\n// We add `Function` to the type intersection to make this nomically different from\n// `finallyOperatorType` while still being structurally the same. Without this, TypeScript tries to\n// reduce `typeof _finallyOperator & FinallyBrand` to `finallyOperatorType<T>` and then fails\n// because `T` isn't known.\nvar finallyOperator = (_finally);\nvar catchOperator = (_catch);\nvar doOperator = (_do);\nvar map$1 = (map);\nvar filter$1 = (filter);\nvar share$1 = (share);\nvar first$1 = (first);\nvar switchMap$1 = (switchMap);\nvar startWith$1 = (startWith);\nvar debounceTime$1 = (debounceTime);\nvar auditTime$1 = (auditTime);\nvar takeUntil$1 = (takeUntil);\nvar delay$1 = (delay);\n/**\n * Generated bundle index. Do not edit.\n */\nexport { RxChain, FinallyBrand, CatchBrand, DoBrand, MapBrand, FilterBrand, ShareBrand, FirstBrand, SwitchMapBrand, StartWithBrand, DebounceTimeBrand, AuditTimeBrand, TakeUntilBrand, DelayBrand, finallyOperator, catchOperator, doOperator, map$1 as map, filter$1 as filter, share$1 as share, first$1 as first, switchMap$1 as switchMap, startWith$1 as startWith, debounceTime$1 as debounceTime, auditTime$1 as auditTime, takeUntil$1 as takeUntil, delay$1 as delay };\n//# sourceMappingURL=rxjs.es5.js.map\n",null]}