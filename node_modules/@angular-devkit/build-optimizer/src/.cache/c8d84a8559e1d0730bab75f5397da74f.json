{"remainingRequest":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/list.es5.js","dependencies":[{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/material/esm5/list.es5.js","mtime":1507246791000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_common,_angular_core,_angular_material_core,tslib,tslib,_angular_cdk_a11y,_angular_cdk_coercion,_angular_cdk_collections,_angular_cdk_keycodes PURE_IMPORTS_END */\nimport { CommonModule } from '@angular/common';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, Input, NgModule, Optional, Output, Renderer2, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { MatCommonModule, MatLine, MatLineModule, MatLineSetter, MatPseudoCheckboxModule, MatRippleModule, mixinDisableRipple, mixinDisabled, mixinTabIndex } from '@angular/material/core';\nimport { __extends } from 'tslib';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { SPACE } from '@angular/cdk/keycodes';\n/**\n * \\@docs-private\n */\nvar MatListBase = /*@__PURE__*/ (function () {\n    function MatListBase() {\n    }\n    return MatListBase;\n}());\nvar _MatListMixinBase = /*@__PURE__*/ mixinDisableRipple(MatListBase);\n/**\n * \\@docs-private\n */\nvar MatListItemBase = /*@__PURE__*/ (function () {\n    function MatListItemBase() {\n    }\n    return MatListItemBase;\n}());\nvar _MatListItemMixinBase = /*@__PURE__*/ mixinDisableRipple(MatListItemBase);\n/**\n * Divider between items within a list.\n */\nvar MatListDivider = /*@__PURE__*/ (function () {\n    function MatListDivider() {\n    }\n    return MatListDivider;\n}());\n/**\n * A Material Design list component.\n */\nvar MatList = /*@__PURE__*/ (function (_super) {\n    __extends(MatList, _super);\n    function MatList() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatList;\n}(_MatListMixinBase));\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MatListCssMatStyler = /*@__PURE__*/ (function () {\n    function MatListCssMatStyler() {\n    }\n    return MatListCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MatNavListCssMatStyler = /*@__PURE__*/ (function () {\n    function MatNavListCssMatStyler() {\n    }\n    return MatNavListCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MatDividerCssMatStyler = /*@__PURE__*/ (function () {\n    function MatDividerCssMatStyler() {\n    }\n    return MatDividerCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MatListAvatarCssMatStyler = /*@__PURE__*/ (function () {\n    function MatListAvatarCssMatStyler() {\n    }\n    return MatListAvatarCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MatListIconCssMatStyler = /*@__PURE__*/ (function () {\n    function MatListIconCssMatStyler() {\n    }\n    return MatListIconCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MatListSubheaderCssMatStyler = /*@__PURE__*/ (function () {\n    function MatListSubheaderCssMatStyler() {\n    }\n    return MatListSubheaderCssMatStyler;\n}());\n/**\n * An item within a Material Design list.\n */\nvar MatListItem = /*@__PURE__*/ (function (_super) {\n    __extends(MatListItem, _super);\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _list\n     * @param {?} navList\n     */\n    function MatListItem(_renderer, _element, _list, navList) {\n        var _this = _super.call(this) || this;\n        _this._renderer = _renderer;\n        _this._element = _element;\n        _this._list = _list;\n        _this._isNavList = false;\n        _this._isNavList = !!navList;\n        return _this;\n    }\n    Object.defineProperty(MatListItem.prototype, \"_hasAvatar\", {\n        /**\n         * @param {?} avatar\n         * @return {?}\n         */\n        set: function (avatar) {\n            if (avatar != null) {\n                this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n            }\n            else {\n                this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatListItem.prototype.ngAfterContentInit = function () {\n        this._lineSetter = new MatLineSetter(this._lines, this._renderer, this._element);\n    };\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n    MatListItem.prototype._isRippleDisabled = function () {\n        return !this._isNavList || this.disableRipple || this._list.disableRipple;\n    };\n    /**\n     * @return {?}\n     */\n    MatListItem.prototype._handleFocus = function () {\n        this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n    };\n    /**\n     * @return {?}\n     */\n    MatListItem.prototype._handleBlur = function () {\n        this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n    };\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    MatListItem.prototype._getHostElement = function () {\n        return this._element.nativeElement;\n    };\n    return MatListItem;\n}(_MatListItemMixinBase));\n/**\n * \\@docs-private\n */\nvar MatSelectionListBase = /*@__PURE__*/ (function () {\n    function MatSelectionListBase() {\n    }\n    return MatSelectionListBase;\n}());\nvar _MatSelectionListMixinBase = /*@__PURE__*/ mixinTabIndex(/*@__PURE__*/ mixinDisableRipple(/*@__PURE__*/ mixinDisabled(MatSelectionListBase)));\n/**\n * \\@docs-private\n */\nvar MatListOptionBase = /*@__PURE__*/ (function () {\n    function MatListOptionBase() {\n    }\n    return MatListOptionBase;\n}());\nvar _MatListOptionMixinBase = /*@__PURE__*/ mixinDisableRipple(MatListOptionBase);\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is checked.\n */\nvar MatListOption = /*@__PURE__*/ (function (_super) {\n    __extends(MatListOption, _super);\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _changeDetector\n     * @param {?} selectionList\n     */\n    function MatListOption(_renderer, _element, _changeDetector, selectionList) {\n        var _this = _super.call(this) || this;\n        _this._renderer = _renderer;\n        _this._element = _element;\n        _this._changeDetector = _changeDetector;\n        _this.selectionList = selectionList;\n        _this._selected = false;\n        _this._disabled = false;\n        /**\n         * Whether the option has focus.\n         */\n        _this._hasFocus = false;\n        /**\n         * Whether the label should appear before or after the checkbox. Defaults to 'after'\n         */\n        _this.checkboxPosition = 'after';\n        /**\n         * Emitted when the option is selected.\n         */\n        _this.selectChange = new EventEmitter();\n        /**\n         * Emitted when the option is deselected.\n         */\n        _this.deselected = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(MatListOption.prototype, \"disabled\", {\n        /**\n         * Whether the option is disabled.\n         * @return {?}\n         */\n        get: function () { return (this.selectionList && this.selectionList.disabled) || this._disabled; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatListOption.prototype, \"selected\", {\n        /**\n         * Whether the option is selected.\n         * @return {?}\n         */\n        get: function () { return this._selected; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            var /** @type {?} */ isSelected = coerceBooleanProperty(value);\n            if (isSelected !== this._selected) {\n                var /** @type {?} */ selectionModel = this.selectionList.selectedOptions;\n                this._selected = isSelected;\n                isSelected ? selectionModel.select(this) : selectionModel.deselect(this);\n                this._changeDetector.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatListOption.prototype.ngOnInit = function () {\n        if (this.selected) {\n            this.selectionList.selectedOptions.select(this);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatListOption.prototype.ngAfterContentInit = function () {\n        this._lineSetter = new MatLineSetter(this._lines, this._renderer, this._element);\n        if (this.selectionList.disabled) {\n            this.disabled = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatListOption.prototype.ngOnDestroy = function () {\n        this.selectionList._removeOptionFromList(this);\n    };\n    /**\n     * Toggles the selection state of the option.\n     * @return {?}\n     */\n    MatListOption.prototype.toggle = function () {\n        this.selected = !this.selected;\n    };\n    /**\n     * Allows for programmatic focusing of the option.\n     * @return {?}\n     */\n    MatListOption.prototype.focus = function () {\n        this._element.nativeElement.focus();\n    };\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n    MatListOption.prototype._isRippleDisabled = function () {\n        return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n    };\n    /**\n     * @return {?}\n     */\n    MatListOption.prototype._handleClick = function () {\n        if (!this.disabled) {\n            this.toggle();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatListOption.prototype._handleFocus = function () {\n        this._hasFocus = true;\n        this.selectionList._setFocusedOption(this);\n    };\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    MatListOption.prototype._getHostElement = function () {\n        return this._element.nativeElement;\n    };\n    return MatListOption;\n}(_MatListOptionMixinBase));\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nvar MatSelectionList = /*@__PURE__*/ (function (_super) {\n    __extends(MatSelectionList, _super);\n    /**\n     * @param {?} _element\n     * @param {?} tabIndex\n     */\n    function MatSelectionList(_element, tabIndex) {\n        var _this = _super.call(this) || this;\n        _this._element = _element;\n        /**\n         * The currently selected options.\n         */\n        _this.selectedOptions = new SelectionModel(true);\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    MatSelectionList.prototype.ngAfterContentInit = function () {\n        this._keyManager = new FocusKeyManager(this.options).withWrap();\n    };\n    /**\n     * Focus the selection-list.\n     * @return {?}\n     */\n    MatSelectionList.prototype.focus = function () {\n        this._element.nativeElement.focus();\n    };\n    /**\n     * Selects all of the options.\n     * @return {?}\n     */\n    MatSelectionList.prototype.selectAll = function () {\n        this.options.forEach(function (option) {\n            if (!option.selected) {\n                option.toggle();\n            }\n        });\n    };\n    /**\n     * Deselects all of the options.\n     * @return {?}\n     */\n    MatSelectionList.prototype.deselectAll = function () {\n        this.options.forEach(function (option) {\n            if (option.selected) {\n                option.toggle();\n            }\n        });\n    };\n    /**\n     * Sets the focused option of the selection-list.\n     * @param {?} option\n     * @return {?}\n     */\n    MatSelectionList.prototype._setFocusedOption = function (option) {\n        this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n    };\n    /**\n     * Removes an option from the selection list and updates the active item.\n     * @param {?} option\n     * @return {?}\n     */\n    MatSelectionList.prototype._removeOptionFromList = function (option) {\n        if (option._hasFocus) {\n            var /** @type {?} */ optionIndex = this._getOptionIndex(option);\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            }\n            else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    };\n    /**\n     * Passes relevant key presses to our key manager.\n     * @param {?} event\n     * @return {?}\n     */\n    MatSelectionList.prototype._keydown = function (event) {\n        switch (event.keyCode) {\n            case SPACE:\n                this._toggleSelectOnFocusedOption();\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    };\n    /**\n     * Toggles the selected state of the currently focused option.\n     * @return {?}\n     */\n    MatSelectionList.prototype._toggleSelectOnFocusedOption = function () {\n        var /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            var /** @type {?} */ focusedOption = this.options.toArray()[focusedIndex];\n            if (focusedOption) {\n                focusedOption.toggle();\n            }\n        }\n    };\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of options.\n     */\n    MatSelectionList.prototype._isValidIndex = function (index) {\n        return index >= 0 && index < this.options.length;\n    };\n    /**\n     * Returns the index of the specified list option.\n     * @param {?} option\n     * @return {?}\n     */\n    MatSelectionList.prototype._getOptionIndex = function (option) {\n        return this.options.toArray().indexOf(option);\n    };\n    return MatSelectionList;\n}(_MatSelectionListMixinBase));\nvar MatListModule = /*@__PURE__*/ (function () {\n    function MatListModule() {\n    }\n    return MatListModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatListModule, MatListBase, _MatListMixinBase, MatListItemBase, _MatListItemMixinBase, MatListDivider, MatList, MatListCssMatStyler, MatNavListCssMatStyler, MatDividerCssMatStyler, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatListItem, MatSelectionListBase, _MatSelectionListMixinBase, MatListOptionBase, _MatListOptionMixinBase, MatListOption, MatSelectionList };\n//# sourceMappingURL=list.es5.js.map\n",null]}