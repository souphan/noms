{"remainingRequest":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/cdk/esm5/stepper.es5.js","dependencies":[{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular/cdk/esm5/stepper.es5.js","mtime":1507246701000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/souphan/Library/Mobile Documents/com~apple~CloudDocs/nomfoods/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_core,_angular_cdk_keycodes,_angular_cdk_coercion,_angular_cdk_bidi,_angular_common PURE_IMPORTS_END */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, EventEmitter, Inject, Input, NgModule, Optional, Output, TemplateRef, ViewChild, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE } from '@angular/cdk/keycodes';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BidiModule, Directionality } from '@angular/cdk/bidi';\nimport { CommonModule } from '@angular/common';\nvar CdkStepLabel = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} template\n     */\n    function CdkStepLabel(template) {\n        this.template = template;\n    }\n    return CdkStepLabel;\n}());\n/**\n * Used to generate unique ID for each stepper component.\n */\nvar nextId = 0;\n/**\n * Change event emitted on selection changes.\n */\nvar StepperSelectionEvent = /*@__PURE__*/ (function () {\n    function StepperSelectionEvent() {\n    }\n    return StepperSelectionEvent;\n}());\nvar CdkStep = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _stepper\n     */\n    function CdkStep(_stepper) {\n        this._stepper = _stepper;\n        /**\n         * Whether user has seen the expanded step content or not.\n         */\n        this.interacted = false;\n        this._editable = true;\n        this._optional = false;\n        this._customCompleted = null;\n    }\n    Object.defineProperty(CdkStep.prototype, \"editable\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._editable; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._editable = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkStep.prototype, \"optional\", {\n        /**\n         * Whether the completion of step is optional or not.\n         * @return {?}\n         */\n        get: function () { return this._optional; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._optional = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkStep.prototype, \"completed\", {\n        /**\n         * Return whether step is completed or not.\n         * @return {?}\n         */\n        get: function () {\n            return this._customCompleted == null ? this._defaultCompleted : this._customCompleted;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            this._customCompleted = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkStep.prototype, \"_defaultCompleted\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects this step component.\n     * @return {?}\n     */\n    CdkStep.prototype.select = function () {\n        this._stepper.selected = this;\n    };\n    /**\n     * @return {?}\n     */\n    CdkStep.prototype.ngOnChanges = function () {\n        // Since basically all inputs of the MdStep get proxied through the view down to the\n        // underlying MdStepHeader, we have to make sure that change detection runs correctly.\n        this._stepper._stateChanged();\n    };\n    return CdkStep;\n}());\nvar CdkStepper = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _dir\n     * @param {?} _changeDetectorRef\n     */\n    function CdkStepper(_dir, _changeDetectorRef) {\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._linear = false;\n        this._selectedIndex = 0;\n        /**\n         * Event emitted when the selected step has changed.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * The index of the step that the focus can be set.\n         */\n        this._focusIndex = 0;\n        this._groupId = nextId++;\n    }\n    Object.defineProperty(CdkStepper.prototype, \"linear\", {\n        /**\n         * Whether the validity of previous steps should be checked or not.\n         * @return {?}\n         */\n        get: function () { return this._linear; },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) { this._linear = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkStepper.prototype, \"selectedIndex\", {\n        /**\n         * The index of the selected step.\n         * @return {?}\n         */\n        get: function () { return this._selectedIndex; },\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        set: function (index) {\n            if (this._anyControlsInvalid(index)\n                || index < this._selectedIndex && !this._steps.toArray()[index].editable) {\n                // remove focus from clicked step header if the step is not able to be selected\n                this._stepHeader.toArray()[index].nativeElement.blur();\n            }\n            else if (this._selectedIndex != index) {\n                this._emitStepperSelectionEvent(index);\n                this._focusIndex = this._selectedIndex;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkStepper.prototype, \"selected\", {\n        /**\n         * The step that is selected.\n         * @return {?}\n         */\n        get: function () { return this._steps.toArray()[this.selectedIndex]; },\n        /**\n         * @param {?} step\n         * @return {?}\n         */\n        set: function (step) {\n            this.selectedIndex = this._steps.toArray().indexOf(step);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects and focuses the next step in list.\n     * @return {?}\n     */\n    CdkStepper.prototype.next = function () {\n        this.selectedIndex = Math.min(this._selectedIndex + 1, this._steps.length - 1);\n    };\n    /**\n     * Selects and focuses the previous step in list.\n     * @return {?}\n     */\n    CdkStepper.prototype.previous = function () {\n        this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n    };\n    /**\n     * Returns a unique id for each step label element.\n     * @param {?} i\n     * @return {?}\n     */\n    CdkStepper.prototype._getStepLabelId = function (i) {\n        return \"mat-step-label-\" + this._groupId + \"-\" + i;\n    };\n    /**\n     * Returns unique id for each step content element.\n     * @param {?} i\n     * @return {?}\n     */\n    CdkStepper.prototype._getStepContentId = function (i) {\n        return \"mat-step-content-\" + this._groupId + \"-\" + i;\n    };\n    /**\n     * Marks the component to be change detected.\n     * @return {?}\n     */\n    CdkStepper.prototype._stateChanged = function () {\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Returns position state of the step with the given index.\n     * @param {?} index\n     * @return {?}\n     */\n    CdkStepper.prototype._getAnimationDirection = function (index) {\n        var /** @type {?} */ position = index - this._selectedIndex;\n        if (position < 0) {\n            return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n        }\n        else if (position > 0) {\n            return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n        }\n        return 'current';\n    };\n    /**\n     * Returns the type of icon to be displayed.\n     * @param {?} index\n     * @return {?}\n     */\n    CdkStepper.prototype._getIndicatorType = function (index) {\n        var /** @type {?} */ step = this._steps.toArray()[index];\n        if (!step.completed || this._selectedIndex == index) {\n            return 'number';\n        }\n        else {\n            return step.editable ? 'edit' : 'done';\n        }\n    };\n    /**\n     * @param {?} newIndex\n     * @return {?}\n     */\n    CdkStepper.prototype._emitStepperSelectionEvent = function (newIndex) {\n        var /** @type {?} */ stepsArray = this._steps.toArray();\n        this.selectionChange.emit({\n            selectedIndex: newIndex,\n            previouslySelectedIndex: this._selectedIndex,\n            selectedStep: stepsArray[newIndex],\n            previouslySelectedStep: stepsArray[this._selectedIndex],\n        });\n        this._selectedIndex = newIndex;\n        this._stateChanged();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CdkStepper.prototype._onKeydown = function (event) {\n        switch (event.keyCode) {\n            case RIGHT_ARROW:\n                if (this._layoutDirection() === 'rtl') {\n                    this._focusPreviousStep();\n                }\n                else {\n                    this._focusNextStep();\n                }\n                break;\n            case LEFT_ARROW:\n                if (this._layoutDirection() === 'rtl') {\n                    this._focusNextStep();\n                }\n                else {\n                    this._focusPreviousStep();\n                }\n                break;\n            case SPACE:\n            case ENTER:\n                this.selectedIndex = this._focusIndex;\n                break;\n            default:\n                // Return to avoid calling preventDefault on keys that are not explicitly handled.\n                return;\n        }\n        event.preventDefault();\n    };\n    /**\n     * @return {?}\n     */\n    CdkStepper.prototype._focusNextStep = function () {\n        this._focusStep((this._focusIndex + 1) % this._steps.length);\n    };\n    /**\n     * @return {?}\n     */\n    CdkStepper.prototype._focusPreviousStep = function () {\n        this._focusStep((this._focusIndex + this._steps.length - 1) % this._steps.length);\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    CdkStepper.prototype._focusStep = function (index) {\n        this._focusIndex = index;\n        this._stepHeader.toArray()[this._focusIndex].nativeElement.focus();\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    CdkStepper.prototype._anyControlsInvalid = function (index) {\n        this._steps.toArray()[this._selectedIndex].interacted = true;\n        if (this._linear && index >= 0) {\n            return this._steps.toArray().slice(0, index).some(function (step) { return step.stepControl.invalid; });\n        }\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    CdkStepper.prototype._layoutDirection = function () {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    };\n    return CdkStepper;\n}());\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nvar CdkStepperNext = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _stepper\n     */\n    function CdkStepperNext(_stepper) {\n        this._stepper = _stepper;\n    }\n    return CdkStepperNext;\n}());\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nvar CdkStepperPrevious = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _stepper\n     */\n    function CdkStepperPrevious(_stepper) {\n        this._stepper = _stepper;\n    }\n    return CdkStepperPrevious;\n}());\nvar CdkStepperModule = /*@__PURE__*/ (function () {\n    function CdkStepperModule() {\n    }\n    return CdkStepperModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { StepperSelectionEvent, CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious, CdkStepperModule };\n//# sourceMappingURL=stepper.es5.js.map\n",null]}