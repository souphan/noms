Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
require("localforage");
var InstanceFactory_service_1 = require("../instance-factory/InstanceFactory.service");
var addToStringTag_1 = require("../util/addToStringTag");
var NgForageConfig_service_1 = require("./NgForageConfig.service");
/**
 * Abstract service-level configuration layer for NgForage
 */
var BaseConfigurableImpl = (function () {
    /** @internal */
    function BaseConfigurableImpl(config, instanceFactory) {
        /** @internal */
        this.config = {};
        /** @internal */
        this.storeNeedsRecalc = true;
        this.baseConfig = config;
        this.fact = instanceFactory;
    }
    Object.defineProperty(BaseConfigurableImpl.prototype, "description", {
        /**
         * A description of the database, essentially for developer usage.
         * @default ""
         */
        get: /**
           * A description of the database, essentially for developer usage.
           * @default ""
           */
        function () {
            return 'description' in this.config ? this.config.description : this.baseConfig.description;
        },
        set: function (v) {
            this.config.description = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "driver", {
        /**
         * The preferred driver(s) to use.
         * @see {@link NgForageConfig#DRIVER_INDEXEDDB}
         * @see {@link NgForageConfig#DRIVER_WEBSQL}
         * @see {@link NgForageConfig#DRIVER_LOCALSTORAGE}
         * @default IndexedDB, WebSQL and localStorage
         */
        get: /**
           * The preferred driver(s) to use.
           * @see {@link NgForageConfig#DRIVER_INDEXEDDB}
           * @see {@link NgForageConfig#DRIVER_WEBSQL}
           * @see {@link NgForageConfig#DRIVER_LOCALSTORAGE}
           * @default IndexedDB, WebSQL and localStorage
           */
        function () {
            return 'driver' in this.config ? this.config.driver : this.baseConfig.driver;
        },
        set: function (v) {
            this.config.driver = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "name", {
        /**
         * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
         * In localStorage, this is used as a key prefix for all keys stored in localStorage.
         * @default ngForage
         */
        get: /**
           * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
           * In localStorage, this is used as a key prefix for all keys stored in localStorage.
           * @default ngForage
           */
        function () {
            return 'name' in this.config ? this.config.name : this.baseConfig.name;
        },
        set: function (v) {
            this.config.name = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "size", {
        /**
         * The size of the database in bytes. Used only in WebSQL for now.
         * @default 4980736
         */
        get: /**
           * The size of the database in bytes. Used only in WebSQL for now.
           * @default 4980736
           */
        function () {
            return 'size' in this.config ? this.config.size : this.baseConfig.size;
        },
        set: function (v) {
            this.config.size = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "storeName", {
        /**
         * The name of the datastore.
         * In IndexedDB this is the dataStore,
         * in WebSQL this is the name of the key/value table in the database.
         * Must be alphanumeric, with underscores.
         * Any non-alphanumeric characters will be converted to underscores.
         * @default ng_forage
         */
        get: /**
           * The name of the datastore.
           * In IndexedDB this is the dataStore,
           * in WebSQL this is the name of the key/value table in the database.
           * Must be alphanumeric, with underscores.
           * Any non-alphanumeric characters will be converted to underscores.
           * @default ng_forage
           */
        function () {
            return 'storeName' in this.config ? this.config.storeName : this.baseConfig.storeName;
        },
        set: function (v) {
            this.config.storeName = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "version", {
        /**
         * The version of your database. May be used for upgrades in the future; currently unused.
         * @default 1.0
         */
        get: /**
           * The version of your database. May be used for upgrades in the future; currently unused.
           * @default 1.0
           */
        function () {
            return 'version' in this.config ? this.config.version : this.baseConfig.version;
        },
        set: function (v) {
            this.config.version = v;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "store", {
        /** @internal */
        get: /** @internal */
        function () {
            if (this.storeNeedsRecalc || !this._store) {
                this._store = this.fact.getInstance(this.finalConfig);
                this.storeNeedsRecalc = false;
            }
            return this._store;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseConfigurableImpl.prototype, "finalConfig", {
        /** @internal */
        get: /** @internal */
        function () {
            return Object.assign({}, this.baseConfig.config, this.config);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Bulk-set configuration options
     * @param opts The configuration
     */
    /**
       * Bulk-set configuration options
       * @param opts The configuration
       */
    BaseConfigurableImpl.prototype.configure = /**
       * Bulk-set configuration options
       * @param opts The configuration
       */
    function (opts) {
        opts = opts || {};
        if ('driver' in opts && opts.driver.slice) {
            opts.driver = opts.driver.slice();
        }
        Object.assign(this.config, opts);
        this.storeNeedsRecalc = true;
        return this;
    };
    /** @internal */
    /** @internal */
    BaseConfigurableImpl.prototype.toJSON = /** @internal */
    function () {
        return {
            description: this.description,
            driver: this.driver,
            name: this.name,
            size: this.size,
            storeName: this.storeName,
            version: this.version
        };
    };
    BaseConfigurableImpl.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    BaseConfigurableImpl.ctorParameters = function () { return [
        { type: NgForageConfig_service_1.NgForageConfig, decorators: [{ type: core_1.Inject, args: [NgForageConfig_service_1.NgForageConfig,] },] },
        { type: InstanceFactory_service_1.InstanceFactory, decorators: [{ type: core_1.Inject, args: [InstanceFactory_service_1.InstanceFactory,] },] },
    ]; };
    return BaseConfigurableImpl;
}());
exports.BaseConfigurableImpl = BaseConfigurableImpl;
addToStringTag_1.addToStringTag(BaseConfigurableImpl, 'BaseConfigurable');
