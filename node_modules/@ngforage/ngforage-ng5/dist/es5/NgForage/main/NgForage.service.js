Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var BaseConfigurableImpl_service_1 = require("../config/BaseConfigurableImpl.service");
var addToStringTag_1 = require("../util/addToStringTag");
/**
 * Cache instance
 */
var NgForage = (function (_super) {
    tslib_1.__extends(NgForage, _super);
    function NgForage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NgForage.prototype, "activeDriver", {
        /**
         * Returns the name of the driver being used, or null if none can be used.
         */
        get: /**
           * Returns the name of the driver being used, or null if none can be used.
           */
        function () {
            return this.store.driver();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Removes every key from the database, returning it to a blank slate.
     *
     * clear() will remove <b>every item in the offline store</b>. Use this method with caution.
     */
    /**
       * Removes every key from the database, returning it to a blank slate.
       *
       * clear() will remove <b>every item in the offline store</b>. Use this method with caution.
       */
    NgForage.prototype.clear = /**
       * Removes every key from the database, returning it to a blank slate.
       *
       * clear() will remove <b>every item in the offline store</b>. Use this method with caution.
       */
    function () {
        return this.store.clear();
    };
    /**
     * Gets an item from the storage library.
     * If the key does not exist, getItem() will return null.
     * @param key Data key
     */
    /**
       * Gets an item from the storage library.
       * If the key does not exist, getItem() will return null.
       * @param key Data key
       */
    NgForage.prototype.getItem = /**
       * Gets an item from the storage library.
       * If the key does not exist, getItem() will return null.
       * @param key Data key
       */
    function (key) {
        return this.store.getItem(key);
    };
    /**
     * Iterate over all value/key pairs in datastore.
     * <i>iteratee</i> is called once for each pair, with the following arguments:
     * <ol>
     *   <li>Value</li>
     *   <li>Key</li>
     *   <li>iterationNumber - one-based number</li>
     * </ol>
     * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.
     * @param iteratee
     */
    /**
       * Iterate over all value/key pairs in datastore.
       * <i>iteratee</i> is called once for each pair, with the following arguments:
       * <ol>
       *   <li>Value</li>
       *   <li>Key</li>
       *   <li>iterationNumber - one-based number</li>
       * </ol>
       * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.
       * @param iteratee
       */
    NgForage.prototype.iterate = /**
       * Iterate over all value/key pairs in datastore.
       * <i>iteratee</i> is called once for each pair, with the following arguments:
       * <ol>
       *   <li>Value</li>
       *   <li>Key</li>
       *   <li>iterationNumber - one-based number</li>
       * </ol>
       * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.
       * @param iteratee
       */
    function (iteratee) {
        return this.store.iterate(iteratee);
    };
    /**
     * Get the name of a key based on its ID.
     * @param index
     */
    /**
       * Get the name of a key based on its ID.
       * @param index
       */
    NgForage.prototype.key = /**
       * Get the name of a key based on its ID.
       * @param index
       */
    function (index) {
        return this.store.key(index);
    };
    /**
     * Get the list of all keys in the datastore.
     */
    /**
       * Get the list of all keys in the datastore.
       */
    NgForage.prototype.keys = /**
       * Get the list of all keys in the datastore.
       */
    function () {
        return this.store.keys();
    };
    /**
     * Gets the number of keys in the offline store (i.e. its “length”).
     */
    /**
       * Gets the number of keys in the offline store (i.e. its “length”).
       */
    NgForage.prototype.length = /**
       * Gets the number of keys in the offline store (i.e. its “length”).
       */
    function () {
        return this.store.length();
    };
    /**
     * Even though localForage queues up all of its data API method calls,
     * ready() provides a way to determine whether the asynchronous driver initialization process has finished.
     * That’s useful in cases like when we want to know which driver localForage has settled down using.
     */
    /**
       * Even though localForage queues up all of its data API method calls,
       * ready() provides a way to determine whether the asynchronous driver initialization process has finished.
       * That’s useful in cases like when we want to know which driver localForage has settled down using.
       */
    NgForage.prototype.ready = /**
       * Even though localForage queues up all of its data API method calls,
       * ready() provides a way to determine whether the asynchronous driver initialization process has finished.
       * That’s useful in cases like when we want to know which driver localForage has settled down using.
       */
    function () {
        return this.store.ready();
    };
    /**
     * Removes the value of a key from the offline store.
     * @param key Data key
     */
    /**
       * Removes the value of a key from the offline store.
       * @param key Data key
       */
    NgForage.prototype.removeItem = /**
       * Removes the value of a key from the offline store.
       * @param key Data key
       */
    function (key) {
        return this.store.removeItem(key);
    };
    /**
     * Saves data to an offline store. You can store the following types of JavaScript objects:
     * <ul>
     *  <li>Array</li>
     *  <li>ArrayBuffer</li>
     *  <li>Blob</li>
     *  <li>Float32Array</li>
     *  <li>Float64Array</li>
     *  <li>Int8Array</li>
     *  <li>Int16Array</li>
     *  <li>Int32Array</li>
     *  <li>Number</li>
     *  <li>Object</li>
     *  <li>Uint8Array</li>
     *  <li>Uint8ClampedArray</li>
     *  <li>Uint16Array</li>
     *  <li>Uint32Array</li>
     *  <li>String</li>
     * </ul>
     * @param key Data key
     * @param data Data
     */
    /**
       * Saves data to an offline store. You can store the following types of JavaScript objects:
       * <ul>
       *  <li>Array</li>
       *  <li>ArrayBuffer</li>
       *  <li>Blob</li>
       *  <li>Float32Array</li>
       *  <li>Float64Array</li>
       *  <li>Int8Array</li>
       *  <li>Int16Array</li>
       *  <li>Int32Array</li>
       *  <li>Number</li>
       *  <li>Object</li>
       *  <li>Uint8Array</li>
       *  <li>Uint8ClampedArray</li>
       *  <li>Uint16Array</li>
       *  <li>Uint32Array</li>
       *  <li>String</li>
       * </ul>
       * @param key Data key
       * @param data Data
       */
    NgForage.prototype.setItem = /**
       * Saves data to an offline store. You can store the following types of JavaScript objects:
       * <ul>
       *  <li>Array</li>
       *  <li>ArrayBuffer</li>
       *  <li>Blob</li>
       *  <li>Float32Array</li>
       *  <li>Float64Array</li>
       *  <li>Int8Array</li>
       *  <li>Int16Array</li>
       *  <li>Int32Array</li>
       *  <li>Number</li>
       *  <li>Object</li>
       *  <li>Uint8Array</li>
       *  <li>Uint8ClampedArray</li>
       *  <li>Uint16Array</li>
       *  <li>Uint32Array</li>
       *  <li>String</li>
       * </ul>
       * @param key Data key
       * @param data Data
       */
    function (key, data) {
        return this.store.setItem(key, data);
    };
    /**
     * Check whether the given driver is supported/registered.
     * @param driver Driver name
     */
    /**
       * Check whether the given driver is supported/registered.
       * @param driver Driver name
       */
    NgForage.prototype.supports = /**
       * Check whether the given driver is supported/registered.
       * @param driver Driver name
       */
    function (driver) {
        return this.store.supports(driver);
    };
    NgForage.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    NgForage.ctorParameters = function () { return []; };
    return NgForage;
}(BaseConfigurableImpl_service_1.BaseConfigurableImpl));
exports.NgForage = NgForage;
addToStringTag_1.addToStringTag(NgForage, 'NgForage');
