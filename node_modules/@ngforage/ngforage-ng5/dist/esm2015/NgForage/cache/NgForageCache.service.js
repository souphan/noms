import { Injectable } from '@angular/core';
import { NgForage } from '../main/NgForage.service';
import { addToStringTag } from '../util/addToStringTag';
import { CachedItemImpl } from './CachedItemImpl';
/** @internal */
function calculateCacheKeys(mainKey) {
    return {
        data: `${mainKey}_data`,
        expiry: `${mainKey}_expiry`
    };
}
/** @internal */
function toCachedItem(r) {
    return new CachedItemImpl(r[0], r[1]);
}
/** @internal */
function head(r) {
    return r[0];
}
/** @internal */
// tslint:disable-next-line:no-empty
function toVoid() {
}
/**
 * An extension of {@link NgForage} which adds expiration support
 */
export class NgForageCache extends NgForage {
    /**
       * Cache time in milliseconds
       * @default 300000
       */
    get cacheTime() {
        return 'cacheTime' in this.config ? this.config.cacheTime : this.baseConfig.cacheTime;
    }
    set cacheTime(t) {
        this.config.cacheTime = t;
        this.storeNeedsRecalc = true;
    }
    /**
       * Retrieve data
       * @param key Data key
       */
    getCached(key) {
        const keys = calculateCacheKeys(key);
        const dataPromise = this.getItem(keys.data);
        const expiryPromise = this.getItem(keys.expiry);
        return Promise.all([dataPromise, expiryPromise]).then(toCachedItem);
    }
    /**
       * Remove data
       * @param key Data key
       */
    removeCached(key) {
        const keys = calculateCacheKeys(key);
        const dataPromise = this.removeItem(keys.data);
        const expiryPromise = this.removeItem(keys.expiry);
        return Promise.all([dataPromise, expiryPromise]).then(toVoid);
    }
    /**
       * Set data
       * @param key Data key
       * @param data Data to set
       * @param [cacheTime] Override cache set in {@link CacheConfigurable#cacheTime global or instance config}.
       */
    setCached(key, data, cacheTime) {
        const keys = calculateCacheKeys(key);
        const expiry = typeof cacheTime === 'number' ? cacheTime : this.cacheTime;
        const dataPromise = this.setItem(keys.data, data);
        const expiryPromise = this.setItem(keys.expiry, Date.now() + expiry);
        return Promise.all([dataPromise, expiryPromise]).then(head);
    }
    /** @internal */
    toJSON() {
        const ass = { cacheTime: this.cacheTime };
        return Object.assign(super.toJSON(), ass);
    }
}
NgForageCache.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgForageCache.ctorParameters = () => [];
addToStringTag(NgForageCache, 'NgForageCache');
