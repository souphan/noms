import { Injectable } from '@angular/core';
import * as lf from 'localforage';
import { addToStringTag } from '../util/addToStringTag';
/** @internal */
let instance;
/** @internal */
const config = {
    cacheTime: 300000,
    description: '',
    driver: [lf.INDEXEDDB, lf.WEBSQL, lf.LOCALSTORAGE],
    name: 'ngForage',
    size: 4980736,
    storeName: 'ng_forage',
    version: 1
};
/**
 * Global/default configuration
 */
export class NgForageConfig {
    /**
       * Cache time in milliseconds
       * @default 300000
       */
    get cacheTime() {
        return config.cacheTime;
    }
    set cacheTime(t) {
        config.cacheTime = t;
    }
    /**
       * Get the compiled configuration
       */
    get config() {
        return {
            cacheTime: this.cacheTime,
            description: this.description,
            driver: this.driver,
            name: this.name,
            size: this.size,
            storeName: this.storeName,
            version: this.version
        };
    }
    /**
       * A description of the database, essentially for developer usage.
       * @default
       */
    get description() {
        return config.description;
    }
    set description(v) {
        config.description = v;
    }
    /**
       * The preferred driver(s) to use.
       * @see {@link NgForageConfig#DRIVER_INDEXEDDB}
       * @see {@link NgForageConfig#DRIVER_WEBSQL}
       * @see {@link NgForageConfig#DRIVER_LOCALSTORAGE}
       */
    get driver() {
        if (typeof config.driver === 'string') {
            return config.driver;
        }
        return config.driver.slice();
    }
    set driver(v) {
        config.driver = v;
    }
    /**
       * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
       * In localStorage, this is used as a key prefix for all keys stored in localStorage.
       * @default ngForage
       */
    get name() {
        return config.name;
    }
    set name(v) {
        config.name = v;
    }
    /**
       * The size of the database in bytes. Used only in WebSQL for now.
       * @default 4980736
       */
    get size() {
        return config.size;
    }
    set size(v) {
        config.size = v;
    }
    /**
       * The name of the datastore.
       * In IndexedDB this is the dataStore,
       * in WebSQL this is the name of the key/value table in the database.
       * Must be alphanumeric, with underscores.
       * Any non-alphanumeric characters will be converted to underscores.
       * @default ng_forage
       */
    get storeName() {
        return config.storeName;
    }
    set storeName(v) {
        config.storeName = v;
    }
    /**
       * The version of your database. May be used for upgrades in the future; currently unused.
       * @default 1.0
       */
    get version() {
        return config.version;
    }
    set version(v) {
        config.version = v;
    }
    static factory() {
        if (!instance) {
            instance = new NgForageConfig();
        }
        return instance;
    }
    /**
       * Bulk-set configuration options
       * @param opts The configuration
       */
    configure(opts) {
        opts = opts || {};
        if ('driver' in opts && opts.driver.slice) {
            opts.driver = opts.driver.slice();
        }
        Object.assign(config, opts);
        return this;
    }
    /**
       * Define a driver
       *
       * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the
       * default drivers do. You’ll also want to resolve or reject promises.
       * Check any of the {@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}
       * for an idea of how to implement your own, custom driver.
       * @param spec Driver spec
       */
    defineDriver(spec) {
        return lf.defineDriver(spec);
    }
    /** @internal */
    toJSON() {
        return this.config;
    }
}
/** The IndexedDB driver */
NgForageConfig.DRIVER_INDEXEDDB = lf.INDEXEDDB;
/** The localStorage driver */
NgForageConfig.DRIVER_LOCALSTORAGE = lf.LOCALSTORAGE;
/** The WebSQL driver */
NgForageConfig.DRIVER_WEBSQL = lf.WEBSQL;
/** @internal */
NgForageConfig.provider = {
    provide: NgForageConfig,
    useFactory: NgForageConfig.factory
};
NgForageConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgForageConfig.ctorParameters = () => [];
Object.freeze(NgForageConfig.provider);
addToStringTag(NgForageConfig, 'NgForageConfig');
