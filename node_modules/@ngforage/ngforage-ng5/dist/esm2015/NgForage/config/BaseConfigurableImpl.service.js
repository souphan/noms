import { Inject, Injectable } from '@angular/core';
import 'localforage';
import { InstanceFactory } from '../instance-factory/InstanceFactory.service';
import { addToStringTag } from '../util/addToStringTag';
import { NgForageConfig } from './NgForageConfig.service';
/**
 * Abstract service-level configuration layer for NgForage
 */
export class BaseConfigurableImpl {
    /** @internal */
    constructor(config, instanceFactory) {
        /** @internal */
        this.config = {};
        /** @internal */
        this.storeNeedsRecalc = true;
        this.baseConfig = config;
        this.fact = instanceFactory;
    }
    /**
       * A description of the database, essentially for developer usage.
       * @default ""
       */
    get description() {
        return 'description' in this.config ? this.config.description : this.baseConfig.description;
    }
    set description(v) {
        this.config.description = v;
        this.storeNeedsRecalc = true;
    }
    /**
       * The preferred driver(s) to use.
       * @see {@link NgForageConfig#DRIVER_INDEXEDDB}
       * @see {@link NgForageConfig#DRIVER_WEBSQL}
       * @see {@link NgForageConfig#DRIVER_LOCALSTORAGE}
       * @default IndexedDB, WebSQL and localStorage
       */
    get driver() {
        return 'driver' in this.config ? this.config.driver : this.baseConfig.driver;
    }
    set driver(v) {
        this.config.driver = v;
        this.storeNeedsRecalc = true;
    }
    /**
       * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
       * In localStorage, this is used as a key prefix for all keys stored in localStorage.
       * @default ngForage
       */
    get name() {
        return 'name' in this.config ? this.config.name : this.baseConfig.name;
    }
    set name(v) {
        this.config.name = v;
        this.storeNeedsRecalc = true;
    }
    /**
       * The size of the database in bytes. Used only in WebSQL for now.
       * @default 4980736
       */
    get size() {
        return 'size' in this.config ? this.config.size : this.baseConfig.size;
    }
    set size(v) {
        this.config.size = v;
        this.storeNeedsRecalc = true;
    }
    /**
       * The name of the datastore.
       * In IndexedDB this is the dataStore,
       * in WebSQL this is the name of the key/value table in the database.
       * Must be alphanumeric, with underscores.
       * Any non-alphanumeric characters will be converted to underscores.
       * @default ng_forage
       */
    get storeName() {
        return 'storeName' in this.config ? this.config.storeName : this.baseConfig.storeName;
    }
    set storeName(v) {
        this.config.storeName = v;
        this.storeNeedsRecalc = true;
    }
    /**
       * The version of your database. May be used for upgrades in the future; currently unused.
       * @default 1.0
       */
    get version() {
        return 'version' in this.config ? this.config.version : this.baseConfig.version;
    }
    set version(v) {
        this.config.version = v;
        this.storeNeedsRecalc = true;
    }
    /** @internal */
    get store() {
        if (this.storeNeedsRecalc || !this._store) {
            this._store = this.fact.getInstance(this.finalConfig);
            this.storeNeedsRecalc = false;
        }
        return this._store;
    }
    /** @internal */
    get finalConfig() {
        return Object.assign({}, this.baseConfig.config, this.config);
    }
    /**
       * Bulk-set configuration options
       * @param opts The configuration
       */
    configure(opts) {
        opts = opts || {};
        if ('driver' in opts && opts.driver.slice) {
            opts.driver = opts.driver.slice();
        }
        Object.assign(this.config, opts);
        this.storeNeedsRecalc = true;
        return this;
    }
    /** @internal */
    toJSON() {
        return {
            description: this.description,
            driver: this.driver,
            name: this.name,
            size: this.size,
            storeName: this.storeName,
            version: this.version
        };
    }
}
BaseConfigurableImpl.decorators = [
    { type: Injectable },
];
/** @nocollapse */
BaseConfigurableImpl.ctorParameters = () => [
    { type: NgForageConfig, decorators: [{ type: Inject, args: [NgForageConfig,] },] },
    { type: InstanceFactory, decorators: [{ type: Inject, args: [InstanceFactory,] },] },
];
addToStringTag(BaseConfigurableImpl, 'BaseConfigurable');
