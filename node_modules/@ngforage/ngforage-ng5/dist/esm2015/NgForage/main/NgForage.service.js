import { Injectable } from '@angular/core';
import { BaseConfigurableImpl } from '../config/BaseConfigurableImpl.service';
import { addToStringTag } from '../util/addToStringTag';
/**
 * Cache instance
 */
export class NgForage extends BaseConfigurableImpl {
    /**
       * Returns the name of the driver being used, or null if none can be used.
       */
    get activeDriver() {
        return this.store.driver();
    }
    /**
       * Removes every key from the database, returning it to a blank slate.
       *
       * clear() will remove <b>every item in the offline store</b>. Use this method with caution.
       */
    clear() {
        return this.store.clear();
    }
    /**
       * Gets an item from the storage library.
       * If the key does not exist, getItem() will return null.
       * @param key Data key
       */
    getItem(key) {
        return this.store.getItem(key);
    }
    /**
       * Iterate over all value/key pairs in datastore.
       * <i>iteratee</i> is called once for each pair, with the following arguments:
       * <ol>
       *   <li>Value</li>
       *   <li>Key</li>
       *   <li>iterationNumber - one-based number</li>
       * </ol>
       * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.
       * @param iteratee
       */
    iterate(iteratee) {
        return this.store.iterate(iteratee);
    }
    /**
       * Get the name of a key based on its ID.
       * @param index
       */
    key(index) {
        return this.store.key(index);
    }
    /**
       * Get the list of all keys in the datastore.
       */
    keys() {
        return this.store.keys();
    }
    /**
       * Gets the number of keys in the offline store (i.e. its “length”).
       */
    length() {
        return this.store.length();
    }
    /**
       * Even though localForage queues up all of its data API method calls,
       * ready() provides a way to determine whether the asynchronous driver initialization process has finished.
       * That’s useful in cases like when we want to know which driver localForage has settled down using.
       */
    ready() {
        return this.store.ready();
    }
    /**
       * Removes the value of a key from the offline store.
       * @param key Data key
       */
    removeItem(key) {
        return this.store.removeItem(key);
    }
    /**
       * Saves data to an offline store. You can store the following types of JavaScript objects:
       * <ul>
       *  <li>Array</li>
       *  <li>ArrayBuffer</li>
       *  <li>Blob</li>
       *  <li>Float32Array</li>
       *  <li>Float64Array</li>
       *  <li>Int8Array</li>
       *  <li>Int16Array</li>
       *  <li>Int32Array</li>
       *  <li>Number</li>
       *  <li>Object</li>
       *  <li>Uint8Array</li>
       *  <li>Uint8ClampedArray</li>
       *  <li>Uint16Array</li>
       *  <li>Uint32Array</li>
       *  <li>String</li>
       * </ul>
       * @param key Data key
       * @param data Data
       */
    setItem(key, data) {
        return this.store.setItem(key, data);
    }
    /**
       * Check whether the given driver is supported/registered.
       * @param driver Driver name
       */
    supports(driver) {
        return this.store.supports(driver);
    }
}
NgForage.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgForage.ctorParameters = () => [];
addToStringTag(NgForage, 'NgForage');
