import { Injectable } from '@angular/core';
import * as lf from 'localforage';
import { addToStringTag } from '../util/addToStringTag';
/** @internal */
var instance;
/** @internal */
var config = {
    cacheTime: 300000,
    description: '',
    driver: [lf.INDEXEDDB, lf.WEBSQL, lf.LOCALSTORAGE],
    name: 'ngForage',
    size: 4980736,
    storeName: 'ng_forage',
    version: 1
};
/**
 * Global/default configuration
 */
var NgForageConfig = (function () {
    function NgForageConfig() {
    }
    Object.defineProperty(NgForageConfig.prototype, "cacheTime", {
        /**
         * Cache time in milliseconds
         * @default 300000
         */
        get: /**
           * Cache time in milliseconds
           * @default 300000
           */
        function () {
            return config.cacheTime;
        },
        set: function (t) {
            config.cacheTime = t;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "config", {
        /**
         * Get the compiled configuration
         */
        get: /**
           * Get the compiled configuration
           */
        function () {
            return {
                cacheTime: this.cacheTime,
                description: this.description,
                driver: this.driver,
                name: this.name,
                size: this.size,
                storeName: this.storeName,
                version: this.version
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "description", {
        /**
         * A description of the database, essentially for developer usage.
         * @default
         */
        get: /**
           * A description of the database, essentially for developer usage.
           * @default
           */
        function () {
            return config.description;
        },
        set: function (v) {
            config.description = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "driver", {
        /**
         * The preferred driver(s) to use.
         * @see {@link NgForageConfig#DRIVER_INDEXEDDB}
         * @see {@link NgForageConfig#DRIVER_WEBSQL}
         * @see {@link NgForageConfig#DRIVER_LOCALSTORAGE}
         */
        get: /**
           * The preferred driver(s) to use.
           * @see {@link NgForageConfig#DRIVER_INDEXEDDB}
           * @see {@link NgForageConfig#DRIVER_WEBSQL}
           * @see {@link NgForageConfig#DRIVER_LOCALSTORAGE}
           */
        function () {
            if (typeof config.driver === 'string') {
                return config.driver;
            }
            return config.driver.slice();
        },
        set: function (v) {
            config.driver = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "name", {
        /**
         * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
         * In localStorage, this is used as a key prefix for all keys stored in localStorage.
         * @default ngForage
         */
        get: /**
           * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.
           * In localStorage, this is used as a key prefix for all keys stored in localStorage.
           * @default ngForage
           */
        function () {
            return config.name;
        },
        set: function (v) {
            config.name = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "size", {
        /**
         * The size of the database in bytes. Used only in WebSQL for now.
         * @default 4980736
         */
        get: /**
           * The size of the database in bytes. Used only in WebSQL for now.
           * @default 4980736
           */
        function () {
            return config.size;
        },
        set: function (v) {
            config.size = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "storeName", {
        /**
         * The name of the datastore.
         * In IndexedDB this is the dataStore,
         * in WebSQL this is the name of the key/value table in the database.
         * Must be alphanumeric, with underscores.
         * Any non-alphanumeric characters will be converted to underscores.
         * @default ng_forage
         */
        get: /**
           * The name of the datastore.
           * In IndexedDB this is the dataStore,
           * in WebSQL this is the name of the key/value table in the database.
           * Must be alphanumeric, with underscores.
           * Any non-alphanumeric characters will be converted to underscores.
           * @default ng_forage
           */
        function () {
            return config.storeName;
        },
        set: function (v) {
            config.storeName = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForageConfig.prototype, "version", {
        /**
         * The version of your database. May be used for upgrades in the future; currently unused.
         * @default 1.0
         */
        get: /**
           * The version of your database. May be used for upgrades in the future; currently unused.
           * @default 1.0
           */
        function () {
            return config.version;
        },
        set: function (v) {
            config.version = v;
        },
        enumerable: true,
        configurable: true
    });
    NgForageConfig.factory = function () {
        if (!instance) {
            instance = new NgForageConfig();
        }
        return instance;
    };
    /**
     * Bulk-set configuration options
     * @param opts The configuration
     */
    /**
       * Bulk-set configuration options
       * @param opts The configuration
       */
    NgForageConfig.prototype.configure = /**
       * Bulk-set configuration options
       * @param opts The configuration
       */
    function (opts) {
        opts = opts || {};
        if ('driver' in opts && opts.driver.slice) {
            opts.driver = opts.driver.slice();
        }
        Object.assign(config, opts);
        return this;
    };
    /**
     * Define a driver
     *
     * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the
     * default drivers do. You’ll also want to resolve or reject promises.
     * Check any of the {@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}
     * for an idea of how to implement your own, custom driver.
     * @param spec Driver spec
     */
    /**
       * Define a driver
       *
       * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the
       * default drivers do. You’ll also want to resolve or reject promises.
       * Check any of the {@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}
       * for an idea of how to implement your own, custom driver.
       * @param spec Driver spec
       */
    NgForageConfig.prototype.defineDriver = /**
       * Define a driver
       *
       * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the
       * default drivers do. You’ll also want to resolve or reject promises.
       * Check any of the {@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}
       * for an idea of how to implement your own, custom driver.
       * @param spec Driver spec
       */
    function (spec) {
        return lf.defineDriver(spec);
    };
    /** @internal */
    /** @internal */
    NgForageConfig.prototype.toJSON = /** @internal */
    function () {
        return this.config;
    };
    /** The IndexedDB driver */
    NgForageConfig.DRIVER_INDEXEDDB = lf.INDEXEDDB;
    /** The localStorage driver */
    NgForageConfig.DRIVER_LOCALSTORAGE = lf.LOCALSTORAGE;
    /** The WebSQL driver */
    NgForageConfig.DRIVER_WEBSQL = lf.WEBSQL;
    /** @internal */
    NgForageConfig.provider = {
        provide: NgForageConfig,
        useFactory: NgForageConfig.factory
    };
    NgForageConfig.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgForageConfig.ctorParameters = function () { return []; };
    return NgForageConfig;
}());
export { NgForageConfig };
Object.freeze(NgForageConfig.provider);
addToStringTag(NgForageConfig, 'NgForageConfig');
