import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NgForage } from '../main/NgForage.service';
import { addToStringTag } from '../util/addToStringTag';
import { CachedItemImpl } from './CachedItemImpl';
/** @internal */
function calculateCacheKeys(mainKey) {
    return {
        data: mainKey + "_data",
        expiry: mainKey + "_expiry"
    };
}
/** @internal */
function toCachedItem(r) {
    return new CachedItemImpl(r[0], r[1]);
}
/** @internal */
function head(r) {
    return r[0];
}
/** @internal */
// tslint:disable-next-line:no-empty
function toVoid() {
}
/**
 * An extension of {@link NgForage} which adds expiration support
 */
var NgForageCache = (function (_super) {
    tslib_1.__extends(NgForageCache, _super);
    function NgForageCache() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NgForageCache.prototype, "cacheTime", {
        /**
         * Cache time in milliseconds
         * @default 300000
         */
        get: /**
           * Cache time in milliseconds
           * @default 300000
           */
        function () {
            return 'cacheTime' in this.config ? this.config.cacheTime : this.baseConfig.cacheTime;
        },
        set: function (t) {
            this.config.cacheTime = t;
            this.storeNeedsRecalc = true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Retrieve data
     * @param key Data key
     */
    /**
       * Retrieve data
       * @param key Data key
       */
    NgForageCache.prototype.getCached = /**
       * Retrieve data
       * @param key Data key
       */
    function (key) {
        var keys = calculateCacheKeys(key);
        var dataPromise = this.getItem(keys.data);
        var expiryPromise = this.getItem(keys.expiry);
        return Promise.all([dataPromise, expiryPromise]).then(toCachedItem);
    };
    /**
     * Remove data
     * @param key Data key
     */
    /**
       * Remove data
       * @param key Data key
       */
    NgForageCache.prototype.removeCached = /**
       * Remove data
       * @param key Data key
       */
    function (key) {
        var keys = calculateCacheKeys(key);
        var dataPromise = this.removeItem(keys.data);
        var expiryPromise = this.removeItem(keys.expiry);
        return Promise.all([dataPromise, expiryPromise]).then(toVoid);
    };
    /**
     * Set data
     * @param key Data key
     * @param data Data to set
     * @param [cacheTime] Override cache set in {@link CacheConfigurable#cacheTime global or instance config}.
     */
    /**
       * Set data
       * @param key Data key
       * @param data Data to set
       * @param [cacheTime] Override cache set in {@link CacheConfigurable#cacheTime global or instance config}.
       */
    NgForageCache.prototype.setCached = /**
       * Set data
       * @param key Data key
       * @param data Data to set
       * @param [cacheTime] Override cache set in {@link CacheConfigurable#cacheTime global or instance config}.
       */
    function (key, data, cacheTime) {
        var keys = calculateCacheKeys(key);
        var expiry = typeof cacheTime === 'number' ? cacheTime : this.cacheTime;
        var dataPromise = this.setItem(keys.data, data);
        var expiryPromise = this.setItem(keys.expiry, Date.now() + expiry);
        return Promise.all([dataPromise, expiryPromise]).then(head);
    };
    /** @internal */
    /** @internal */
    NgForageCache.prototype.toJSON = /** @internal */
    function () {
        var ass = { cacheTime: this.cacheTime };
        return Object.assign(_super.prototype.toJSON.call(this), ass);
    };
    NgForageCache.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgForageCache.ctorParameters = function () { return []; };
    return NgForageCache;
}(NgForage));
export { NgForageCache };
addToStringTag(NgForageCache, 'NgForageCache');
